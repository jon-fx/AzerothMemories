// <auto-generated />
using System;
using AzerothMemories.WebServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AzerothMemories.WebServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AzerothMemories.WebServer.Database.Records.AccountRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BattleNetToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("BattleNetTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BattleTag")
                        .HasColumnType("text");

                    b.Property<long>("BlizzardId")
                        .HasColumnType("bigint");

                    b.Property<int>("BlizzardRegionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FusionId")
                        .HasColumnType("text");

                    b.Property<string>("UpdateJob")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateJobEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdateJobLastResult")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateJobQueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdateJobStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AzerothMemories.WebServer.Database.Records.CharacterRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AccountSync")
                        .HasColumnType("boolean");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("text");

                    b.Property<long>("BlizzardId")
                        .HasColumnType("bigint");

                    b.Property<int>("BlizzardRegionId")
                        .HasColumnType("integer");

                    b.Property<byte>("Class")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Faction")
                        .HasColumnType("integer");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("MoaRef")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte>("Race")
                        .HasColumnType("smallint");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer");

                    b.Property<string>("SearchableName")
                        .HasColumnType("text");

                    b.Property<string>("UpdateJob")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateJobEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpdateJobLastResult")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateJobQueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdateJobStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbSessionInfo<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("AuthenticatedIdentity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSignOutForced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt", "IsSignOutForced");

                    b.HasIndex("IPAddress", "IsSignOutForced");

                    b.HasIndex("LastSeenAt", "IsSignOutForced");

                    b.HasIndex("UserId", "IsSignOutForced");

                    b.ToTable("_Sessions");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClaimsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbUserIdentity<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DbUser<string>Id")
                        .HasColumnType("text");

                    b.Property<string>("DbUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DbUser<string>Id");

                    b.HasIndex("Id");

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Extensions.DbKeyValue", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("_KeyValues");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Operations.DbOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommitTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ItemsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CommitTime" }, "IX_CommitTime");

                    b.HasIndex(new[] { "StartTime" }, "IX_StartTime");

                    b.ToTable("_Operations");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbUserIdentity<string>", b =>
                {
                    b.HasOne("Stl.Fusion.EntityFramework.Authentication.DbUser<string>", null)
                        .WithMany("Identities")
                        .HasForeignKey("DbUser<string>Id");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Authentication.DbUser<string>", b =>
                {
                    b.Navigation("Identities");
                });
#pragma warning restore 612, 618
        }
    }
}
