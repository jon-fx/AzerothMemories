@implements IActiveCommentContext

@{
    var item = Comment;
    var comment = item.Comment;
    var username = comment.GetAccountUsernameSafe();
    var accountLink = $"account/{comment.AccountId}";
    var headerId = $"moa-top-comment-{item.Id}";
}

<div id="@headerId" class="postIndent">
    <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
        <MudCardHeader Class="@(item.IsFocused ? "pt-2 pb-2 mud-theme-primary" : "pt-2 pb-2")">
            <CardHeaderAvatar >
                <a href="@accountLink">
                    <MudAvatar Class="cardLinkText" Size="Size.Small" Image="@comment.AccountAvatar">@username[0]</MudAvatar>
                </a>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <a href="@accountLink">
                    <MudText Class="cardLinkText" Typo="Typo.body1">@username</MudText>
                </a>
                <MudText Typo="Typo.body2">@Services.TimeProvider.GetTimeAsLocalStringAgo(comment.CreatedTime, true)</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Dense="true">
                    <MudMenuItem Link="@($"/post/{item.PostersAccountId}/{comment.PostId}?comment={comment.Id}")">
                        <MudTooltip Text="Link" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                            <MudIcon Icon="@Icons.Material.Filled.AddLink" Size="Size.Small" />
                        </MudTooltip>
                    </MudMenuItem>

                    @if (comment.AccountId == Services.ActiveAccountServices.ActiveAccountId)
                    {
                        <MudMenuItem OnClick="@OnDeleteComment" Disabled="@(comment.DeletedTimeStamp != 0)">
                            <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" />
                            </MudTooltip>
                        </MudMenuItem>
                    }

                    @if (Services.ActiveAccountServices.IsAccountActive && comment.AccountId != Services.ActiveAccountServices.ActiveAccountId)
                    {
                        <MudMenuItem OnClick="@OnReportComment">
                            <MudTooltip Text="Report" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@Icons.Material.Filled.Report" Size="Size.Small" />
                            </MudTooltip>
                        </MudMenuItem>
                    }
                </MudMenu>
            </CardHeaderActions>
        </MudCardHeader>

        @if (comment.DeletedTimeStamp == 0)
        {
            <MudCardContent Class="@ClassPresets.CardContent">
                <MudText Typo="Typo.body2" Style="overflow-wrap: anywhere;">@(new MarkupString(comment.PostComment))</MudText>
                <MudText Class="cardLinkText" Typo="Typo.body2" @onclick="OnReactionLinkClicked">@ZExtensions.BuildReactionString(comment.TotalReactionCount, comment.ReactionCounters)</MudText>
            </MudCardContent>

            <MudCardActions Class="@ClassPresets.CardActions">
                <MudButtonGroup OverrideStyles="true" Variant="Variant.Text" Size="Size.Small">
                    <MudButton StartIcon="@Icons.Material.Filled.Favorite" IconColor="@(item.Reaction == PostReaction.None ? Color.Default : Color.Secondary)" Disabled="@(IsDisabled || _userReacting)" OnClick="() => OnReactButtonClicked(item.Reaction)">@item.Reaction.Humanize()</MudButton>
                    <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Disabled="@(IsDisabled || _userReacting)" Direction="Direction.Bottom" OffsetY="true">
                        <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction1)">@PostReaction.Reaction1.Humanize()</MudMenuItem>
                        <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction2)">@PostReaction.Reaction2.Humanize()</MudMenuItem>
                        <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction3)">@PostReaction.Reaction3.Humanize()</MudMenuItem>
                        <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction4)">@PostReaction.Reaction4.Humanize()</MudMenuItem>
                        <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction5)">@PostReaction.Reaction5.Humanize()</MudMenuItem>
                        <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction6)">@PostReaction.Reaction6.Humanize()</MudMenuItem>
                    </MudMenu>
                    <MudButton OnClick="() => ReplyToComment(item)" Disabled="@IsDisabled">Reply</MudButton>
                </MudButtonGroup>
            </MudCardActions>
        }
        else
        {
            <MudCardContent Class="@ClassPresets.CardContent">
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Deleted by @(comment.DeletedTimeStamp > 0 ? "user" : "admin").</MudAlert>
            </MudCardContent>
        }
    </MudCard>

    @if (item.ShowReactions)
    {
        var reactionData = item.ReactionData;
        if (item.ShowReactionIsLoading)
        {
            <CardLoadingComponent />
        }
        else
        {
            <PostReactionsDisplayCard Services="@Services" ReactionData="@reactionData" />
        }
    }

    @if (item.ShowChildren || item.Children.Count < 10)
    {
        foreach (var child in item.Children)
        {
            <PostCommentComponent @key="@child" Services="@Services" Comment="@child" />
        }
    }
    else if (item.HasChild)
    {
        <div class="postIndent">
            <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
                <MudCardContent Class="@ClassPresets.CardContent">
                    <MudButton Class="pa-2 ma-2" FullWidth="true" Variant="Variant.Filled" OnClick="() => item.ShowChildren = true">Show @item.Children.Count comments</MudButton>
                </MudCardContent>
            </MudCard>
        </div>
    }

    @if (Services.ActiveAccountServices.ActiveCommentContext == this)
    {
        <PublishCommentBoxComponent Services="@Services" ReplyToUserId="@comment.AccountId" ReplyToUsername="@comment.AccountUsername" PostId="@comment.PostId" CommentId="@comment.Id" />
    }
</div>

@code
{
    private bool _userReacting;

    public bool IsDisabled => !Services.ActiveAccountServices.IsAccountActive || Comment.Comment.DeletedTimeStamp != 0;
    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    [Parameter, EditorRequired] public PostCommentTreeNode Comment { get; init; }

    private async Task OnReactButtonClicked(PostReaction newReaction)
    {
        if (_userReacting)
        {
            return;
        }

        if (newReaction == PostReaction.None)
        {
            newReaction = PostReaction.Reaction1;
        }

        var node = Comment;
        var comment = node.Comment;
        var postId = comment.PostId;
        var commentId = comment.Id;
        if (node.Reaction == newReaction)
        {
            newReaction = PostReaction.None;
        }

        _userReacting = true;

        node.ReactionId = await Services.ComputeServices.PostServices.TryReactToPostComment(null, postId, commentId, newReaction);
        node.Reaction = newReaction;

        _userReacting = false;

        StateHasChanged();
    }

    private void ReplyToComment(PostCommentTreeNode item)
    {
        Services.ActiveAccountServices.ActiveCommentContext = Services.ActiveAccountServices.ActiveCommentContext == this ? null : this;
    }

    public void InvokeStateHasChanged()
    {
        StateHasChanged();
    }

    private async Task OnDeleteComment()
    {
        var comment = Comment.Comment;
        if (comment.DeletedTimeStamp != 0)
        {
            return;
        }

        var confirmationResult = await Services.DialogService.ShowMessageBox("Warning", "Deleting can not be undone!", "Delete!", "Cancel");
        if (confirmationResult.HasValue && confirmationResult.Value)
        {
            var postId = comment.PostId;
            var commentId = comment.Id;

            comment.DeletedTimeStamp = await Services.ComputeServices.PostServices.TryDeleteComment(null, postId, commentId);

            var message = comment.DeletedTimeStamp == 0 ? "Comment delete failed." : "Comment deleted.";
            await Services.DialogService.ShowNotificationDialog(true, message);
        }
    }

    private async Task OnReportComment()
    {        
        await Services.DialogService.ShowReportPostDialog($"Report {Comment.Comment.AccountUsername}'s Comment ({Comment.Comment.Id})", Comment.Comment.PostId, Comment.Comment.Id);
    }

    private async Task OnReactionLinkClicked()
    {
        Comment.ShowReactions = !Comment.ShowReactions;

        if (Comment.ShowReactions && Comment.ReactionData == null)
        {
            await Comment.TryLoadReactions(Services);
        }
    }

    private void OnReactionChipClickedCallback(PostReactionViewModel reaction)
    {
        Services.NavigationManager.NavigateTo($"/account/{reaction.AccountId}");
    }
}