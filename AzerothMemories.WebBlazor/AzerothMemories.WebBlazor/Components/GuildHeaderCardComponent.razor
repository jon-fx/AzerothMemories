@using _Imports = AzerothMemories.WebBlazor._Imports
@if (GuildViewModel == null)
{

}
else if (GuildViewModel.IsLoadingFromArmory)
{
    <CardInfoComponent Message="Loading Guild From Armory..." />
}
else
{
    <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderAvatar>
                <MudAvatar Size="Size.Large" Image="@GuildViewModel.Avatar">@GuildViewModel.GetAvatarText()</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <div>
                    <GuildNameLinkComponent Typo="Typo.h6"
                                        GuildName="@GuildViewModel.Name"
                                        GuildRealmId="@GuildViewModel.RealmId"
                                        GuildRegionInfo="@GuildViewModel.RegionId.ToInfo()" />
                </div>
                <div>
                    <RealmLinkComponent Typo="Typo.caption" BlizzardRealmId="@GuildViewModel.RealmId" />
                </div>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
    </MudCard>

    var characters = GetCharactersSafe();
    if (characters.Count > 0)
    {
        <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
            <MudCardContent Class="@ClassPresets.CardContent">
                @{
                    var remainingCharacters = GuildViewModel.MembersViewModel.TotalCount;
                    foreach (var character in characters)
                    {
                        remainingCharacters--;

                        <CharacterLinkButton @key="character" BlizzardStringLocalizer="@Services.ClientServices.BlizzardStringLocalizer" CharacterViewModel="@character" />
                    }
                    
                    if (remainingCharacters > 0)
                    {
                        <MudTooltip Placement="Placement.Bottom" Color="Color.Dark">
                            <ChildContent>
                                <MudButton Variant="Variant.Filled" OnClick="LoadMoreCharacters">
                                    <MudAvatar Size="Size.Medium">...</MudAvatar>
                                </MudButton>
                            </ChildContent>
                            <TooltipContent>
                                <MudText Typo="Typo.body1">Load more... (@remainingCharacters.ToString("N0"))</MudText>
                            </TooltipContent>
                        </MudTooltip>
                    }
                }
            </MudCardContent>
        </MudCard>
    }
}

@code
{
    private int _guildMemberPageIndex = 0;
    private List<CharacterViewModel> _guildMembers;

    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    [Parameter, EditorRequired] public GuildViewModel GuildViewModel { get; init; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _guildMembers = null;
        _guildMemberPageIndex = 1;
    }

    private async Task LoadMoreCharacters()
    {
        if (_guildMembers == null)
        {
            return;
        }

        var currentSet = await Services.ComputeServices.GuildServices.TryGetGuildMembers(Session.Default, GuildViewModel.Id, _guildMemberPageIndex++);
        foreach (var characterViewModel in currentSet.CharactersArray)
        {
            _guildMembers.Add(characterViewModel);
        }
    }

    private List<CharacterViewModel> GetCharactersSafe()
    {
        if (Services == null || GuildViewModel == null || GuildViewModel.MembersViewModel == null)
        {
            return new List<CharacterViewModel>();
        }

        if (_guildMembers == null)
        {
            _guildMembers = new List<CharacterViewModel>(GuildViewModel.MembersViewModel.CharactersArray);
        }

        return _guildMembers;
    }
}