@using Microsoft.Extensions.Primitives
@implements IActiveCommentContext

@if (Helper == null)
{
    <CardLoadingComponent />
}
else if (Helper.PostViewModel == null)
{
    <CardLoadingComponent />
}
else if (Helper.PostViewModel.DeletedTimeStamp != 0)
{
    <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderContent>
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Deleted by @(Helper.PostViewModel.DeletedTimeStamp > 0 ? "user" : "admin").</MudAlert>
            </CardHeaderContent>
        </MudCardHeader>
    </MudCard>
}
else if (Helper.PostViewModel.DeletedTimeStamp == 0)
{
    <PostComponent Services="@Services" Post="@Helper.PostViewModel" InDialog="true" />

    @if (Helper.RootComments == null || Helper.RootComments.Count == 0)
    {
        if (Services.ClientServices.ActiveAccountServices.ActiveCommentContext == this)
        {
            <PublishCommentBoxComponent Services="@Services" PostId="@Helper.PostViewModel.Id" />
        }
        else
        {
            <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
                <MudCardContent Class="@ClassPresets.CardContent">
                    <MudText Class="pa-2 ma-2" Align="Align.Center" Typo="Typo.body2">No comments</MudText>
                    <MudButton Class="pa-2 ma-2" FullWidth="true" Variant="Variant.Filled" Disabled="@IsDisabled" OnClick="AddComment">Add comment</MudButton>
                </MudCardContent>
            </MudCard>
        }
    }
    else
    {
        <div id="moa-top-header-comments"></div>

        foreach (var comment in Helper.RootComments)
        {
            <PostCommentComponent @key="@comment" Services="@Services" Comment="@comment" />
        }

        var showAdd = Services.ClientServices.ActiveAccountServices.ActiveCommentContext != this && Helper.Page == Helper.TotalPages;
        if (Services.ClientServices.ActiveAccountServices.ActiveCommentContext == this)
        {
            <PublishCommentBoxComponent Services="@Services" PostId="@Helper.PostViewModel.Id" />
        }

        if (showAdd)
        {
            <div class="postIndent">
                <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
                    <MudCardContent Class="@ClassPresets.CardContent">
                        <MudButton Class="pa-2 ma-2" FullWidth="true" Variant="Variant.Filled" Disabled="@IsDisabled" OnClick="AddComment">Add comment</MudButton>
                    </MudCardContent>
                </MudCard>
            </div>
        }

        <div class="d-flex justify-center pa-2 ma-2">
            <MudPagination Selected="@Helper.Page" SelectedChanged="OnPageChanged" BoundaryCount="2" MiddleCount="5" Rectangular="true" Variant="Variant.Filled" ShowFirstButton="true" ShowLastButton="true" Count="@Helper.TotalPages" />
        </div>
    }
}

@code
{
    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    [Parameter, EditorRequired] public PostPageViewModelHelper Helper { get; init; }

    [Inject] IScrollManager ScrollManager { get; init; }

    public bool IsDisabled => !Services.ClientServices.ActiveAccountServices.IsAccountActiveAndCanInteract;

    private void AddComment()
    {
        Services.ClientServices.ActiveAccountServices.ActiveCommentContext = this;
    }

    public void InvokeStateHasChanged()
    {
        StateHasChanged();
    }

    private void OnPageChanged(int currentPage)
    {
        if (currentPage == Helper.Page)
        {
            return;
        }

        var newPath = Services.ClientServices.NavigationManager.GetUriWithQueryParameter("page", currentPage);
        Services.ClientServices.NavigationManager.NavigateTo(newPath);
    }
}