@if (Post == null)
{
    <CardLoadingComponent />
}
else if (Post.DeletedTimeStamp != 0)
{
    <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderContent>
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Deleted by @(Post.DeletedTimeStamp > 0 ? "user" : "admin").</MudAlert>
            </CardHeaderContent>
        </MudCardHeader>
    </MudCard>
}
else
{
    <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderAvatar >
                <MudAvatar Size="Size.Medium" Image="@Post.AccountAvatar">@Post.AccountUsername[0]</MudAvatar>
                @if (!string.IsNullOrWhiteSpace(Post.PostAvatar))
                {
                    <MudAvatar Class="ml-n3 mt-5" Style="float: right" Size="Size.Small" Image="@Post.PostAvatar">?</MudAvatar>
                }
            </CardHeaderAvatar>
            <CardHeaderContent>
                <a href="@($"/account/{Post.AccountId}")" tabindex="-1">
                    <MudText Typo="Typo.body1">@Post.AccountUsername</MudText>
                </a>
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.body2" Inline="true">@Services.TimeProvider.GetTimeAsLocalStringAgo(Post.PostTime, true)</MudText>
                    <MudText Typo="Typo.body2" Inline="true">@Services.TimeProvider.GetTimeAsLocalStringAgo(Post.PostCreatedTime, true)</MudText>
                </div>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Dense="true">

                    <MudMenuItem Link="@($"/post/{Post.AccountId}/{Post.Id}")">
                        <MudTooltip Text="Link" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                            <MudIcon Icon="@Icons.Material.Filled.AddLink" Size="Size.Small" />
                        </MudTooltip>
                    </MudMenuItem>

                    @if (Post.AccountId == Services.ActiveAccountServices.ActiveAccountId || Services.ActiveAccountServices.IsAdmin)
                    {
                        <MudMenuItem OnClick="@OnTogglePostVisibility">
                            <MudTooltip Text="Toggle Visibility" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@(Post.PostVisibility == 0 ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)" Size="Size.Small " />
                            </MudTooltip>
                        </MudMenuItem>

                        <MudMenuItem OnClick="@OnEditPostTags">
                            <MudTooltip Text="Edit Tags" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small " />
                            </MudTooltip>
                        </MudMenuItem>

                        <MudMenuItem OnClick="@OnDeletePost" Disabled="@(Post.DeletedTimeStamp != 0)">
                            <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small " />
                            </MudTooltip>
                        </MudMenuItem>
                    }

                    @if (Services.ActiveAccountServices.IsAccountActive && Post.AccountId != Services.ActiveAccountServices.ActiveAccountId)
                    {
                        <MudMenuItem OnClick="@OnReportPostTags">
                            <MudTooltip Text="Report Tags" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@Icons.Material.Filled.RepeatOneOn" Size="Size.Small" />
                            </MudTooltip>
                        </MudMenuItem>

                        <MudMenuItem OnClick="@OnReportPost">
                            <MudTooltip Text="Report" Arrow="true" Placement="Placement.Left" Color="Color.Dark">
                                <MudIcon Icon="@Icons.Material.Filled.Report" Size="Size.Small" />
                            </MudTooltip>
                        </MudMenuItem>
                    }
                </MudMenu>
            </CardHeaderActions>
        </MudCardHeader>

        <MudDivider />
        
        <MudCardContent Class="@ClassPresets.CardContent">
            @if (DoseNotHavePermission)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">You do not have permission to view this post.</MudAlert>
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(Post.PostComment))
                {
                    <MudText Typo="Typo.body2" Style="overflow-wrap: anywhere;">@(new MarkupString(Post.PostComment))</MudText>
                }

                @foreach (var blobName in Post.ImageBlobNames)
                {
                }

                <div class="d-flex justify-space-between pa-0 ma-2">
                    @if (InDialog)
                    {
                        @*<MudText Typo="Typo.body2">@ZExtensions.BuildReactionString(Post.TotalReactionCount, Post.ReactionCounters)</MudText>*@
                        <MudText Class="cardLinkText" Typo="Typo.body2" @onclick="OnReactionLinkClicked">@ZExtensions.BuildReactionString(Post.TotalReactionCount, Post.ReactionCounters)</MudText>
                        <MudText Typo="Typo.body2">@Post.TotalCommentCount.ToMetric() Comments</MudText>
                    }
                    else
                    {
                        <MudText Class="cardLinkText" Typo="Typo.body2" @onclick="OnReactionLinkClicked">@ZExtensions.BuildReactionString(Post.TotalReactionCount, Post.ReactionCounters)</MudText>
                        <MudText Class="cardLinkText" Typo="Typo.body2" @onclick="OnCommentButtonClicked">@Post.TotalCommentCount.ToMetric() Comments</MudText>
                    }
                </div>
            }

            <MudDivider Class="my-1" />

            @{
                var systemTags = Post.SystemTags;
                if (systemTags != null)
                {
                    foreach (var tagInfo in systemTags)
                    {
                        if (OnTagChipClickedCallback.HasDelegate)
                        {
                            <PostTagChipComponent @key="@tagInfo" TagInfo="tagInfo" OnClick="@(() => OnTagChipClickedCallback.InvokeAsync(tagInfo))" />
                        }
                        else
                        {
                            <PostTagChipComponent @key="@tagInfo" TagInfo="tagInfo" OnClick="@(() => Services.NavigationManager.NavigateTo(tagInfo.GetTagQueryLink()))" />
                        }
                    }
                }
            }
        </MudCardContent>

        <MudCardActions Class="@ClassPresets.CardActions">
            <MudButtonGroup OverrideStyles="true" Class="pa-2 ma-2" Variant="Variant.Filled" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.Favorite" IconColor="@(Post.Reaction == PostReaction.None ? Color.Default : Color.Secondary)" Disabled="@(IsDisabled || _userReacting)" OnClick="() => OnReactButtonClicked(Post.Reaction)">@Post.Reaction.Humanize()</MudButton>
                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Disabled="@(IsDisabled || _userReacting)" Direction="Direction.Bottom" OffsetY="true">
                    <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction1)">@PostReaction.Reaction1.Humanize()</MudMenuItem>
                    <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction2)">@PostReaction.Reaction2.Humanize()</MudMenuItem>
                    <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction3)">@PostReaction.Reaction3.Humanize()</MudMenuItem>
                    <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction4)">@PostReaction.Reaction4.Humanize()</MudMenuItem>
                    <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction5)">@PostReaction.Reaction5.Humanize()</MudMenuItem>
                    <MudMenuItem OnClick="() => OnReactButtonClicked(PostReaction.Reaction6)">@PostReaction.Reaction6.Humanize()</MudMenuItem>
                </MudMenu>
                <MudButton StartIcon="@Icons.Material.Filled.Comment" Disabled="@IsDisabled" OnClick="OnCommentButtonClicked">Comments</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Share" Disabled="@(IsDisabled ||  _isChangingTags)" OnClick="() => _showTagMenu = !_showTagMenu">Restore Memory</MudButton>
            </MudButtonGroup>
        </MudCardActions>
    </MudCard>

    @if (DoseNotHavePermission)
    {

    }
    else
    {
        if (_showReactions)
        {
            var reactionData = _postReactions;
            if (_reactionAreLoading)
            {
                <CardLoadingComponent />
            }
            else
            {
                <PostReactionsDisplayCard Services="@Services" ReactionData="@reactionData" />
            }
        }

        if (_showTagMenu)
        {
            if (_isChangingTags)
            {
                <CardLoadingComponent />
            }
            else
            {
                var systemTags = Post.SystemTags;
                if (systemTags != null)
                {
                    var characters = Services.ActiveAccountServices.AccountViewModel.GetCharactersSafe();
                    if (characters.Length > 0)
                    {
                        CharacterViewModel taggedCharacter = null;
                        foreach (var moaCharacterViewModel in characters)
                        {
                            var tagInfo = systemTags.FirstOrDefault(x => x.Type == PostTagType.Character && x.Id == moaCharacterViewModel.Id);
                            if (tagInfo == null)
                            {
                                continue;
                            }

                            taggedCharacter = moaCharacterViewModel;
                        }

                        <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
                            <MudCardContent Class="@ClassPresets.CardContent">
                                <MudTooltip Placement="Placement.End" Color="Color.Dark">
                                    <ChildContent>
                                        <MudButton Variant="Variant.Filled" Disabled="taggedCharacter == null" OnClick="() => OnRestoreButtonClicked(taggedCharacter, null)">
                                            <MudAvatar Size="Size.Medium">?</MudAvatar>
                                        </MudButton>
                                    </ChildContent>
                                    <TooltipContent>
                                        <MudText>None</MudText>
                                    </TooltipContent>
                                </MudTooltip>

                                @for (var i = 0; i < characters.Length; i++)
                                {
                                    var index = i;
                                    var character = characters[index];
                 
                                    <MudTooltip @key="@character.Id" Placement="Placement.Bottom" Color="Color.Dark">
                                        <ChildContent>
                                            <MudButton Id="@index" Variant="Variant.Filled" Disabled="taggedCharacter != null && taggedCharacter.Id == character.Id" OnClick="() => OnRestoreButtonClicked(taggedCharacter, character)">
                                                <MudAvatar Size="Size.Medium" Image="@character.AvatarLinkWithFallBack" />
                                            </MudButton>
                                        </ChildContent>
                                        <TooltipContent>
                                            <CharacterNameLinkComponent CharacterName="@character.Name"
                                            CharacterClass="@character.Class"
                                            CharacterRealmId="@character.RealmId"
                                            CharacterRegionInfo="@character.RegionId.ToInfo()" />

                                            <div>
                                                <MudText Inline="true" Typo="Typo.body2">@character.Level @Services.StringLocalizer[$"CharacterRace-{character.Race}"]</MudText>
                                                <MudText Inline="true" Typo="Typo.body2" Class=@($"wowclass-{character.Class}")>@Services.StringLocalizer[$"CharacterClass-{character.Class}"]</MudText>
                                            </div>

                                            <RealmLinkComponent Typo="Typo.caption" BlizzardRealmId="@character.RealmId" />
                                        </TooltipContent>
                                    </MudTooltip>
                                }
                            </MudCardContent>
                        </MudCard>
                    }
                    else
                    {
                        <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
                            <MudCardContent Class="@ClassPresets.CardContent">
                                <MudText Align="Align.Center">No Characters</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                }
            }
        }
    }
}

@code {
    private bool _postChanged;
    private readonly PostViewModel _post;

    private bool _userReacting;
    private bool _showReactions;
    private bool _reactionAreLoading;
    private PostReactionViewModel[] _postReactions;

    private bool _showTagMenu;
    private bool _isChangingTags;

    [Parameter, EditorRequired]
    public IMoaServices Services { get; init; }

    [Parameter, EditorRequired]
    public PostViewModel Post
    {
        get => _post;
        init
        {
            _postChanged = _post != value;
            _post = value;
        }
    }

    [Parameter] public bool InDialog { get; init; }

    [Parameter] public EventCallback<PostTagInfo> OnTagChipClickedCallback { get; init; }

    public bool DoseNotHavePermission => Post.PostVisibility == 255;

    public bool IsDisabled => !Services.ActiveAccountServices.IsAccountActive || DoseNotHavePermission;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (_postChanged)
        {
            if (Post != null)
            {
                if (_showReactions)
                {
                    await TryLoadReactions();
                }
            }

            _postChanged = false;
        }
    }

    private async Task OnReactButtonClicked(PostReaction newReaction)
    {
        if (_userReacting)
        {
            return;
        }

        if (newReaction == PostReaction.None)
        {
            newReaction = PostReaction.Reaction1;
        }

        if (Post.Reaction == newReaction)
        {
            newReaction = PostReaction.None;
        }

        _userReacting = true;

        var postId = Post.Id;

        Post.ReactionId = await Services.ComputeServices.PostServices.TryReactToPost(null, postId, newReaction);
        Post.Reaction = newReaction;

        _userReacting = false;

        StateHasChanged();
    }

    private async Task OnReactionLinkClicked()
    {
        _showReactions = !_showReactions;

        if (_showReactions && _postReactions == null)
        {
            await TryLoadReactions();
        }
    }

    private async Task TryLoadReactions()
    {
        if (!_showReactions)
        {
            return;
        }

        if (_reactionAreLoading)
        {
            return;
        }

        _reactionAreLoading = true;

        var postId = Post.Id;
        var reactionData = await Services.ComputeServices.PostServices.TryGetReactions(null, postId);
        if (reactionData == null)
        {
            _postReactions = null;
        }
        else if (reactionData.Length == 0)
        {
            _postReactions = Array.Empty<PostReactionViewModel>();
        }
        else
        {
            _postReactions = reactionData.OrderBy(x => x.LastUpdateTime).ToArray();
        }

        _reactionAreLoading = false;
    }

    private void OnCommentButtonClicked()
    {
        Services.NavigationManager.NavigateTo($"/post/{Post.AccountId}/{Post.Id}");
    }

    private async Task OnRestoreButtonClicked(CharacterViewModel previousCharacter, CharacterViewModel character)
    {
        if (_isChangingTags)
        {
            return;
        }

        _isChangingTags = true;

        var postId = Post.Id;
        var result = await Services.ComputeServices.PostServices.TryRestoreMemory(null, postId, previousCharacter?.Id ?? -1, character?.Id ?? -1);
        if (result)
        {
            _showTagMenu = false;
        }

        _isChangingTags = false;
    }

    private async Task OnDeletePost()
    {
        if (Post.DeletedTimeStamp != 0)
        {
            return;
        }

        var confirmationResult = await Services.DialogService.ShowMessageBox("Warning", "Deleting can not be undone!", "Delete!", "Cancel");
        if (confirmationResult.HasValue && confirmationResult.Value)
        {
            var postId = Post.Id;

            Post.DeletedTimeStamp = await Services.ComputeServices.PostServices.TryDeletePost(null, postId);

            var message = Post.DeletedTimeStamp == 0 ? "Post delete failed." : "Post deleted.";
            await Services.DialogService.ShowNotificationDialog(true, message);
        }
    }

    private void OnEditPostTags()
    {
        Services.NavigationManager.NavigateTo($"/edittags/{Post.AccountId}/{Post.Id}");
    }

    private async Task OnTogglePostVisibility()
    {
        var postId = Post.Id;
        var newVisibility = Post.PostVisibility == 1 ? (byte)0 : (byte)1;
        var result = await Services.ComputeServices.PostServices.TrySetPostVisibility(null, postId, newVisibility);
        if (result == null)
        {
            await Services.DialogService.ShowNotificationDialog(false, "Post visibility change failed.");
        }
        else
        {
            Post.PostVisibility = result.Value;

            await Services.DialogService.ShowNotificationDialog(true, "Post visibility changed.");
        }
    }

    private async Task OnReportPost()
    {
        await Services.DialogService.ShowReportPostDialog($"Report {Post.AccountUsername}'s Post ({Post.Id})", Post.Id, 0);
    }

    private async Task OnReportPostTags()
    {
        await Services.DialogService.ShowReportPostTagsDialog($"Report Post Tags ({Post.Id})", Post);
    }
}