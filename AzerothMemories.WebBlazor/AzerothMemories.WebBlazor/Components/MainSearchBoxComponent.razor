<AutoCompleteComponent @ref="_autoComplete"
                       Text="@_nullText"
                       Value="@_nullValue"
                       Placeholder="@Placeholder"
                       T="MainSearchResult"
                       SearchFunc="SearchFunc"
                       ToStringFunc="ToStringFunc"
                       ValueChanged="OnValueChanged">
    <ItemTemplate Context="e">
        @if (UseCallback)
        {
            <MainSearchBoxItemComponent Result="@e" />
        }
        else
        {
            <a href="@e.GetLink()">
                <MainSearchBoxItemComponent Result="@e" />
            </a>
        }
    </ItemTemplate>
</AutoCompleteComponent>

@code
{
    private string _nullText = null;
    private MainSearchResult _nullValue = null;
    private MainSearchResult _lastSelectedValue;
    private AutoCompleteComponent<MainSearchResult> _autoComplete;

    [Parameter] public string Placeholder { get; init; } = "Search...";

    [Parameter] public bool UseCallback { get; init; }

    [Parameter] public MainSearchType SearchType { get; init; } = MainSearchType.Account | MainSearchType.Character | MainSearchType.Guild;

    [Parameter] public EventCallback<MainSearchResult> OnSelectedItemChanged { get; init; }

    [Inject] public ISearchServices SearchServices { get; init; }

    [Inject] public NavigationManager NavigationManager { get; init; }

    private async Task OnValueChanged(MainSearchResult value)
    {
        if (_lastSelectedValue == value)
        {
            return;
        }

        _lastSelectedValue = value;

        if (_lastSelectedValue != null)
        {
            if (UseCallback)
            {
                await OnSelectedItemChanged.InvokeAsync(_lastSelectedValue);
            }
            else
            {
                NavigationManager.NavigateTo(_lastSelectedValue.GetLink());
            }

            await _autoComplete.Clear();
        }
    }

    private async Task<IEnumerable<MainSearchResult>> SearchFunc(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) || searchString.Length < 3)
        {
            return Enumerable.Empty<MainSearchResult>();
        }

        var results = await SearchServices.TrySearch(null, SearchType, searchString);
        return results;
    }

    private string ToStringFunc(MainSearchResult arg)
    {
        if (arg == null)
        {
            return string.Empty;
        }

        return arg.Name;
    }

}