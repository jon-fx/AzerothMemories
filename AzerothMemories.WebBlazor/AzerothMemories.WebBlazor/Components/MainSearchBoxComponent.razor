<AutoCompleteComponent @bind-text="@_autoCompleteText"
                       @bind-value="@SelectedValue"
                       Placeholder="@Placeholder"
                       T="MainSearchResult"
                       SearchFunc="SearchFunc"
                       ToStringFunc="ToStringFunc">
    <ItemTemplate Context="e">
        @if (UseCallback)
        {
            <MainSearchBoxItemComponent Result="@e"/>
        }
        else
        {
            <a href="@e.GetLink()">
                <MainSearchBoxItemComponent Result="@e"/>
            </a>
        }
    </ItemTemplate>
</AutoCompleteComponent>

@code
{
    private string _autoCompleteText;
    private MainSearchResult _lastSelectedValue;

    public MainSearchResult SelectedValue
    {
        get => null;
        set
        {
            if (_lastSelectedValue == value)
            {
                return;
            }
            
            
            _lastSelectedValue = value;

            if (_lastSelectedValue != null)
            {
                if (UseCallback)
                {
                    OnSelectedItemChanged.InvokeAsync(_lastSelectedValue).AndForget();
                }
                else
                {
                    NavigationManager.NavigateTo(_lastSelectedValue.GetLink());
                }
            }

            _autoCompleteText = null;
        }
    }

    [Parameter] public string Placeholder { get; init; } = "Search...";
    
    [Parameter] public bool UseCallback { get; init; }

    [Parameter] public MainSearchType SearchType { get; init; } = MainSearchType.Account | MainSearchType.Character | MainSearchType.Guild;

    [Parameter] public EventCallback<MainSearchResult> OnSelectedItemChanged { get; init; }
    
    [Inject] public ISearchServices SearchServices { get; init; }

    [Inject] public NavigationManager NavigationManager { get; init; }

    private async Task<IEnumerable<MainSearchResult>> SearchFunc(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) || searchString.Length < 3)
        {
            return Enumerable.Empty<MainSearchResult>();
        }
        
        var results = await SearchServices.TrySearch(null, SearchType, searchString);
        return results;
    }

    private string ToStringFunc(MainSearchResult arg)
    {
        if (arg == null)
        {
            return string.Empty;
        }

        return arg.Name;
    }
}