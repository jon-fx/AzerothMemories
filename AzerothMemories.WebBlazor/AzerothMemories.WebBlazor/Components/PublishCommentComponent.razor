<form @onsubmit=Submit>
    <MudGrid>
        <MudItem xs="@(Lines == 1 ? 11 : 12)" Class="my-auto">
            <MudTextField id="mudTextField"
                          @ref="_textField"
                          @bind-Value="@_currentTextFieldText"
                          T="string"
                          Label="Comment"
                          Variant="Variant.Filled"
                          Lines="@Lines"
                          FullWidth="true"
                          Margin="Margin.Dense"
                          DisableUnderLine="true"
                          Disabled="@Disabled"
                          AutoFocus="@AutoFocus"
                          MaxLength="@MaxLength"
                          Immediate="true"
                          DebounceInterval="500"
                          OnDebounceIntervalElapsed="HandleIntervalElapsed"
                          autocomplete="off">
            </MudTextField>
        </MudItem>

        @if (Lines == 1)
        {
            <MudItem xs="1" Class="my-auto mx-n4">
                <MudIconButton Variant="Variant.Filled"
                               Size="Size.Medium"
                               Icon="@Icons.Filled.Send"
                               Color="Color.Primary"
                               Disabled="@(string.IsNullOrWhiteSpace(_currentTextFieldText) || _currentTextFieldText.Length <= 1)"
                               OnClick="Submit" />
            </MudItem>
        }

        <MudItem xs="12">
            <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
                <MudText Typo="Typo.body2" Style="overflow-wrap: break-word;">@(new MarkupString(_currentTextFieldMarkdown))</MudText>
            </MudPaper>
        </MudItem>

    </MudGrid>
</form>

@code
{
    private MudTextField<string> _textField;
    private string _currentTextFieldText;
    private string _currentTextFieldMarkdown = string.Empty;

    [Parameter] public int Lines { get; init; } = 1;

    [Parameter] public int MaxLength { get; init; } = ZExtensions.MaxCommentLength / 2;

    [Parameter] public bool Disabled { get; init; }

    [Parameter] public bool AutoFocus { get; init; }

    [Parameter] public Dictionary<int, string> TagsList { get; init; }

    [Parameter] public EventCallback<string> OnSingleLineSubmit { get; init; }

    [Inject] public IJSRuntime JsRuntime { get; init; }

    [Inject] public MarkdownServices MarkdownServices{ get; init; }

    public Dictionary<int, string> ExtraTags { get; } = new();

    public Dictionary<int, string> FullTagsList
    {
        get
        {
            var newDict = new Dictionary<int, string>(TagsList);
            foreach (var kvp in ExtraTags)
            {
                newDict.TryAdd(kvp.Key, kvp.Value);
            }

            return newDict;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var jsArray = new List<object>();
            foreach (var userTag in FullTagsList)
            {
                jsArray.Add(new { key = userTag.Value, value = userTag.Value });
            }

            await JsRuntime.InvokeVoidAsync("SetUpTagTextBox", "mudTextField", jsArray.ToArray());
        }
    }

    public void SetText(string text)
    {
        _currentTextFieldText = text;
    }

    public void SetReplyText(int userId, string username)
    {
        _currentTextFieldText = $"@{username}";
    }

    public void Reset()
    {
        _currentTextFieldText = string.Empty;
    }

    private async Task Submit()
    {
        var commentText = GetCommentText();
        if (Lines == 1 && !string.IsNullOrWhiteSpace(commentText) && commentText.Length > 1)
        {
            await OnSingleLineSubmit.InvokeAsync(commentText);
        }
    }

    public string GetCommentText()
    {
        var commentText = _currentTextFieldText;
        if (string.IsNullOrWhiteSpace(commentText))
        {
            return string.Empty;
        }

        if (commentText.Length > MaxLength)
        {
            commentText = commentText[..MaxLength];
        }

        return commentText;
    }

    private void HandleIntervalElapsed()
    {
        if (string.IsNullOrWhiteSpace(_currentTextFieldText))
        {
            _currentTextFieldMarkdown = string.Empty;
            
            return;
        }

        var result = MarkdownServices.GetCommentText(_currentTextFieldText, TagsList);
        if (result.ResultCode == MarkdownParserResultCode.Success)
        {
            _currentTextFieldMarkdown = result.CommentTextMarkdown;
        }
        else
        {
            _currentTextFieldMarkdown = "Error";
        }
    }
}