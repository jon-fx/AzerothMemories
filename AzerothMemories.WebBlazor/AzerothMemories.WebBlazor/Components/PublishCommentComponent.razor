@implements IDisposable

<MudTextField id="mudTextField"
              @ref="_textField"
              @bind-Value="@_currentTextFieldText"
              T="string"
              Label="Comment"
              Variant="Variant.Filled"
              Lines="@(IsMainPost ? 10 : 5)"
              FullWidth="true"
              Margin="Margin.Dense"
              DisableUnderLine="true"
              Disabled="@Disabled"
              AutoFocus="@AutoFocus"
              MaxLength="@MaxLength"
              Immediate="true"
              autocomplete="off">
</MudTextField>

@{
    var isSubmitDisabled = true;
    if (_parserResult == null)
    {
    }
    else if (_parserResult.ResultCode == MarkdownParserResultCode.Success)
    {
        if (!string.IsNullOrWhiteSpace(_parserResult.CommentTextMarkdown))
        {
            isSubmitDisabled = false;

            <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
                <MudText Typo="Typo.body2" Style="overflow-wrap: break-word;">@(new MarkupString(_parserResult.CommentTextMarkdown))</MudText>
            </MudPaper>
        }
    }
    else
    {
        <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
            <CardInfoComponent Message="Error."/>
        </MudPaper>
    }

    if (IsMainPost)
    {
    }
    else
    {
        <MudButton Variant="Variant.Filled"
                   FullWidth="true"
                   Color="Color.Primary"
                   IconColor="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Send"
                   Disabled="@isSubmitDisabled"
                   OnClick="Submit">Submit</MudButton>
    }
}

@code
{
    private Timer _timer;
    private MudTextField<string> _textField;
    private string _currentTextFieldText;
    private MarkdownParserResult _parserResult;

    [Parameter] public bool IsMainPost { get; init; }

    [Parameter] public int MaxLength { get; init; } = ZExtensions.MaxCommentLength / 2;

    [Parameter] public bool Disabled { get; init; }

    [Parameter] public bool AutoFocus { get; init; }

    [Parameter] public Dictionary<int, string> TagsList { get; init; }

    [Parameter] public EventCallback<string> OnSingleLineSubmit { get; init; }

    [Inject] public IJSRuntime JsRuntime { get; init; }

    [Inject] public MarkdownServices MarkdownServices { get; init; }

    public Dictionary<int, string> ExtraTags { get; } = new();

    public Dictionary<int, string> FullTagsList
    {
        get
        {
            var newDict = new Dictionary<int, string>(TagsList);
            foreach (var kvp in ExtraTags)
            {
                newDict.TryAdd(kvp.Key, kvp.Value);
            }

            return newDict;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var jsArray = new List<object>();
            foreach (var userTag in FullTagsList)
            {
                jsArray.Add(new { key = userTag.Value, value = userTag.Value });
            }

            await JsRuntime.InvokeVoidAsync("SetUpTagTextBox", "mudTextField", jsArray.ToArray());

            _timer = new Timer(OnTimerTick, null, 0, 500);
        }
    }

    public void SetText(string text)
    {
        _currentTextFieldText = text;
    }

    public void SetReplyText(int userId, string username)
    {
        _currentTextFieldText = $"@{username}";
    }

    public void Reset()
    {
        _currentTextFieldText = string.Empty;
    }

    private async Task Submit()
    {
        if (IsMainPost)
        {
            return;
        }

        if (_parserResult == null)
        {
            return;
        }

        if (_parserResult.ResultCode != MarkdownParserResultCode.Success)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(_parserResult.CommentText) || string.IsNullOrWhiteSpace(_parserResult.CommentTextMarkdown))
        {
            return;
        }

        var commentText = GetCommentText();

        await OnSingleLineSubmit.InvokeAsync(commentText);
    }

    public string GetCommentText()
    {
        var commentText = _currentTextFieldText;
        if (string.IsNullOrWhiteSpace(commentText))
        {
            return string.Empty;
        }

        if (commentText.Length > MaxLength)
        {
            commentText = commentText[..MaxLength];
        }

        return commentText;
    }

    public void Dispose()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private void OnTimerTick(object obj)
    {
        if (_currentTextFieldText == _parserResult?.CommentText)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(_currentTextFieldText))
        {
            _parserResult = null;
        }
        else
        {
            _parserResult = MarkdownServices.GetCommentText(_currentTextFieldText, FullTagsList, IsMainPost);
        }

        InvokeAsync(StateHasChanged).AndForget();
    }
}