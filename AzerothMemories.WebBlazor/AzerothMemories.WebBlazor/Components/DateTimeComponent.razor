@inject TimeProvider _timeProvider;

<MudDatePicker @ref="_datePicker" @bind-Date="@_postDate" OpenTo="OpenTo.Year" Label="Date" MinDate="@_minDateTime" MaxDate="System.DateTime.Now" AutoClose="true" PickerOpened="@OnPickerOpened" PickerClosed="@OnPickerClosed">
    <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _datePicker.Clear())">Clear</MudButton>
        <MudButton OnClick="@(() => _datePicker.Close(false))">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => _datePicker.Close())">Ok</MudButton>
    </PickerActions>
</MudDatePicker>
<MudTimePicker @ref="_timePicker" @bind-Time="@_postTime" Label="Time" AutoClose="true" PickerOpened="@OnPickerOpened" PickerClosed="@OnPickerClosed">
    <PickerActions>
        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _timePicker.Clear())">Clear</MudButton>
        <MudButton OnClick="@(() => _timePicker.Close(false))">Cancel</MudButton>
        <MudButton OnClick="@(() => _timePicker.Close())">Ok</MudButton>
    </PickerActions>
</MudTimePicker>

@code {

    private static readonly DateTime _minDateTime = DateTimeOffset.FromUnixTimeMilliseconds(ZExtensions.MinPostTime.ToUnixTimeMilliseconds()).DateTime;

    private DateTime? _postDate;
    private TimeSpan? _postTime;

    private MudDatePicker _datePicker;
    private MudTimePicker _timePicker;
    private bool _isTimePickerOpened;

    [Parameter]
    public ZonedDateTime? DateTime
    {
        //get => _postDate;
        set
        {
            if (value.HasValue)
            {
                _postDate = value.Value.ToDateTimeUnspecified();
                _postTime = _postDate.Value.TimeOfDay;

                if (_minDateTime > _postDate)
                {
                    _postDate = _minDateTime;
                }
            }
            else
            {
                _postTime = null;
	            _postDate = null;
            }
        }
    }

    [Parameter]
    public Instant? Instant
    {
        set
        {
            if (value.HasValue)
            {
                DateTime = _timeProvider.GetTimeAsLocal(value.Value);
            }
            else
            {
                DateTime = null;
            }
        }
    }

    [Parameter, EditorRequired] public EventCallback<Instant?> OnInstantEventCallback { get; set; }

    private void OnPickerOpened()
    {
        Exceptions.ThrowIf(_isTimePickerOpened);

        _isTimePickerOpened = true;
    }

    private async Task OnPickerClosed()
    {
        Exceptions.ThrowIf(!_isTimePickerOpened);

        _isTimePickerOpened = false;

        await TryUpdateDateTime();
    }

    private async Task TryUpdateDateTime()
    {
        var time = _postTime;
        var dateTime = _postDate;

        if (dateTime.HasValue && time.HasValue)
        {
            dateTime = dateTime.Value.At(time.Value.Hours, time.Value.Minutes);
        }

	    _postDate = dateTime;

        if (_isTimePickerOpened)
        {
        }
        else if (_postDate.HasValue)
        {
            var localTime = LocalDateTime.FromDateTime(_postDate.Value);
            var zonedTime = localTime.InZoneStrictly(_timeProvider.GetCurrentTimeZone());
            var instant = zonedTime.ToInstant();

            await OnInstantEventCallback.InvokeAsync(instant);
        }
        else
        {
            await OnInstantEventCallback.InvokeAsync(null);
        }
    }
}