@inherits MoaComponentBase<AddMemoryComponentViewModel>

@if (IsVisible && ViewModel.SharedData != null && ViewModel.UploadResults.Count > 0)
{
    <MudPaper Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
        <MudGrid>
            <MudItem xs="12">
                @{
                    var time = ViewModel.SharedData.PostTimeStamp.LocalDateTime;
                    var timeStr = $"Time {time.Humanize()} - {time.ToOrdinalWords()} - {time.ToShortTimeString()}";
                }

                <MudText Typo="Typo.h6">@timeStr</MudText>
            </MudItem>

            <MudItem xs="12">
                <DateTimeComponent DateTime="@ViewModel.SharedData.PostTimeStamp" OnDateTimeEventCallback="@OnDateTimeChanged" />
            </MudItem>

            <MudItem xs="12">
                <MudCheckBox Label="Followers only" @bind-Checked="@ViewModel.SharedData.PrivatePost">
                </MudCheckBox>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
        @for (var i = 0; i < ViewModel.UploadResults.Count; i++)
        {
            var index = i;
            var upload = ViewModel.UploadResults[index];
            var timeStr = "Unknown";
            if (upload.FileTimeStamp > 0)
            {
                var time = DateTimeOffset.FromUnixTimeMilliseconds(upload.FileTimeStamp).LocalDateTime;
                timeStr = $"Time {time.Humanize()} - {time.ToOrdinalWords()} - {time.ToShortTimeString()}";
            }

            <MudCard Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@upload.FileName</MudText>
                        <MudText Typo="Typo.body1">@timeStr</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudTooltip Text="Delete" Color="Color.Dark">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="@(index == 0)" />
                        </MudTooltip>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @{
                        var imageSource = $"data:{upload.ContentType};base64,{upload.ContentBase64}"; ;
                        <img src="@imageSource" style="width: 100%; height: auto; object-fit: cover;" />
                    }
                </MudCardContent>
            </MudCard>
        }
    </MudPaper>

    <MudPaper Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
        <InputFile id="fileInput2" OnChange="UploadMoreImages" hidden multiple accept=".jpg, .jpeg, .png" />
        <MudButton HtmlTag="label" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" IconColor="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload" Disabled="@ViewModel.MaxUploadReached" for="fileInput2">Upload Images</MudButton>
    </MudPaper>

    <AddMemoryMainTagComponent SharedData="@ViewModel.SharedData"  />

@*	<MudPaper Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
		<PublishCommentComponent @ref="_commentComponent" Lines="10" TagsList="@ActiveAccountServices.GetUserTagList()" />
	</MudPaper>*@

    @*<AddMemoryPostAvatarComponent SharedData="@ViewModel.SharedData" />*@

    @*<AddMemoryAllTagChipsComponent SharedData="@ViewModel.SharedData" />*@

    <MudPaper Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
        <MudGrid>
@*            @if (ViewModel.SharedData.ErrorStrings.Count > 0)
            {
                foreach (var errorString in ViewModel.SharedData.ErrorStrings)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="@errorString.Item1">@errorString.Item2</MudAlert>
                    </MudItem>
                }
            }*@

            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" FullWidth="true" EndIcon="@Icons.Material.Filled.Delete" IconColor="Color.Secondary" OnClick="UserCancel">Cancel</MudButton>
            </MudItem>

            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" FullWidth="true" EndIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Color="Color.Primary" OnClick="Submit">Ok</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code
{
    [Parameter, EditorRequired] public bool IsVisible { get; set; }

    [Parameter, EditorRequired] public EventCallback<AddMemoryComponentResult> OnPostMemoryResult { get; set; }


    public async Task<AddMemoryUploadResult[]> UploadFiles(InputFileChangeEventArgs arg)
    {
        //DialogService.ShowLoadingDialog();

        Cancel();

        //_componentSharedData.InitializeAccount(ActiveAccountServices.AccountGrain, ActiveAccountServices.AccountViewModel);

        //await _timeProvider.EnsureInitialized(CancellationToken);

        //ViewModel.SharedData.UploadResults  = new List<AddMemoryUploadResult>();

        foreach (var file in arg.GetMultipleFiles())
        {
            await TryAddFile(file);
        }

        //var uploadResult = await Services.UploadService.TryUploadScreenShot(ActiveAccountServices, TimeProvider, arg.File, CancellationToken);
        //if (uploadResult != null)
        //{
        //	var now = SystemClock.Instance.GetCurrentInstant();
        //	var fileTimeStamp = Instant.FromUnixTimeMilliseconds(uploadResult.FileTimeStamp);
        //	var postTimeStamp = now;
        //	var initializeAchievements = false;

        //	if (uploadResult.FileTimeStamp > 0 && fileTimeStamp < now)
        //	{
        //		postTimeStamp = fileTimeStamp;
        //		initializeAchievements = true;
        //	}

        //	_componentSharedData.SetPostTimeStamp(postTimeStamp);

        //	if (initializeAchievements)
        //	{
        //		await _componentSharedData.InitializeAchievements();
        //	}

        //	_postTime = TimeProvider.GetTimeAsLocalDateTime(postTimeStamp);
        //}

        //DialogService.HideLoadingDialog();

        if (ViewModel.UploadResults.Count > 0)
        {
            var currentFileTimeStamp = ViewModel.UploadResults[0].FileTimeStamp;

            await ViewModel.SharedData.SetPostTimeStamp(DateTimeOffset.FromUnixTimeMilliseconds(currentFileTimeStamp).ToLocalTime());

            StateHasChanged();

            return ViewModel.UploadResults.ToArray();
        }

        //_uploadResults = null;

        return null;
    }

    private async Task Submit()
    {
        //DialogService.ShowLoadingDialog();

        //var result = await _componentSharedData.Submit(_commentComponent, _uploadResults);

        //DialogService.HideLoadingDialog();

        //await OnPostMemoryResult.InvokeAsync(result);
    }

    private void Cancel()
    {
        //    if (ViewModel.SharedData != null)
        //    {
        //        ViewModel.SharedData.UploadResults = null;
        //        ViewModel.SharedData.ErrorStrings = new List<(Severity, string)>();
        //    }


        //    if (_componentSharedData != null)
        //    {
        ////_componentSharedData.OnModelChanged = null;
        //    }

        ViewModel.UploadResults.Clear();
        //ViewModel.ErrorStrings.Clear();
        ViewModel.SharedData = new AddMemoryComponentSharedData(ViewModel);
    }

    private async Task UserCancel()
    {
        Cancel();

        //await OnPostMemoryResult.InvokeAsync(new AddMemoryComponentResult(null, AddMemoryResult.Canceled, 0, 0));
    }

    private async Task UploadMoreImages(InputFileChangeEventArgs arg)
    {
        if (ViewModel.MaxUploadReached)
        {
            return;
        }

        //await TimeProvider.EnsureInitialized(CancellationToken);

        //DialogService.ShowLoadingDialog();

        foreach (var file in arg.GetMultipleFiles())
        {
            await TryAddFile(file);
        }

        //DialogService.HideLoadingDialog();
    }

    private async Task TryAddFile(IBrowserFile file)
    {
        if (ViewModel.MaxUploadReached)
        {
            return;
        }

        var previous = ViewModel.UploadResults.FirstOrDefault(x => x.FileName == file.Name);
        if (previous != null)
        {
            return;
        }

        await using var memoryStream = new MemoryStream();
        var stream = file.OpenReadStream(5120000 * 2);
        await stream.CopyToAsync(memoryStream);

        var buffer = memoryStream.ToArray();
        var contentBase64 = Convert.ToBase64String(buffer);
        previous = ViewModel.UploadResults.FirstOrDefault(x => x.ContentBase64 == contentBase64);
        if (previous != null)
        {
            return;
        }

        if (!TimeProvider.TryGetTimeFromFileName(file.Name, out var screenShotUnixTime))
        {
            screenShotUnixTime = file.LastModified.ToUnixTimeMilliseconds();
        }

        var uploadResult = new AddMemoryUploadResult
            {
                FileName = file.Name,
                FileTimeStamp = screenShotUnixTime,
                ContentType = file.ContentType,
                ContentBase64 = contentBase64
            };

        ViewModel.UploadResults.Add(uploadResult);

        StateHasChanged();
    }

    private async Task OnDateTimeChanged(DateTime? arg)
    {
        if (arg.HasValue)
        {
            await ViewModel.SharedData.SetPostTimeStamp(arg.Value.ToLocalTime());
        }
    }
}