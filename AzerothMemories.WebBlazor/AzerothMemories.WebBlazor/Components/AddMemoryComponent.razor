@if (ViewModel.SharedData != null)
{
    <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <MudGrid>
            <MudItem xs="12">
                @{
                    var timeStr = Services.ClientServices.TimeProvider.GetTimeAsLocalStringAgo(ViewModel.SharedData.PostTimeStamp, false);
                }
                <MudText Typo="Typo.h6">@timeStr</MudText>
            </MudItem>

            <MudItem xs="12">
                <DateTimeComponent Instant="@ViewModel.SharedData.PostTimeStamp" OnInstantEventCallback="@OnDateTimeChanged" />
            </MudItem>

            <MudItem xs="12">
                <MudCheckBox Label="Followers only" @bind-Checked="@ViewModel.SharedData.PrivatePost">
                </MudCheckBox>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        @for (var i = 0; i < ViewModel.UploadedImages.Count; i++)
        {
            var index = i;
            var upload = ViewModel.UploadedImages[index];

            <AddMemoryPreviewScreenShotComponent @key="upload" Services="@Services" Index="index" UploadedImage="upload" ViewModel="ViewModel" />
        }
    </MudPaper>

    <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <InputFile id="fileInput2" OnChange="ViewModel.UploadMoreImages" hidden multiple accept="@ZExtensions.UploadAcceptExtensions" />
        <MudButton HtmlTag="label" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" IconColor="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload" Disabled="@ViewModel.MaxUploadReached" for="fileInput2">Upload Images</MudButton>
    </MudPaper>

    <AddMemoryMainTagComponent Services="Services" SharedData="@ViewModel.SharedData" />

    <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <PublishCommentComponent @ref="ViewModel.PublishCommentComponent" IsMainPost="true" TagsList="@Services.ClientServices.ActiveAccountServices.GetUserTagList()" />
    </MudPaper>

    <AddMemoryPostAvatarComponent SharedData="@ViewModel.SharedData" />

    <AddMemoryAllTagChipsComponent SharedData="@ViewModel.SharedData" />

    <AddMemorySubmitCancelComponent SharedData="@ViewModel.SharedData" OnSubmit="@Submit" OnCancel="@UserCancel" />
}

@code {
    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    [Parameter, EditorRequired] public AddMemoryPageViewModel ViewModel { get; init; }

    [Parameter, EditorRequired] public EventCallback<AddMemoryResult> OnPostMemoryResult { get; init; }

    private async Task Submit()
    {
        Services.ClientServices.DialogService.ShowLoadingDialog();

        await Task.Delay(1);

        var result = await ViewModel.Submit();

        Services.ClientServices.DialogService.HideLoadingDialog();

        await OnPostMemoryResult.InvokeAsync(result);
    }

    private async Task UserCancel()
    {
        await ViewModel.Reset();

        await OnPostMemoryResult.InvokeAsync(new AddMemoryResult(AddMemoryResultCode.Canceled));
    }

    private async Task OnDateTimeChanged(Instant? arg)
    {
        if (arg.HasValue)
        {
            await ViewModel.SharedData.SetPostTimeStamp(arg.Value);
        }
    }
}