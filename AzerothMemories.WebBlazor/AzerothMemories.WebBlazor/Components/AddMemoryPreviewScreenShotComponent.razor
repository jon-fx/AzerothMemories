@implements IDisposable

@if (UploadedImage == null)
{

}
else
{
    var timeStr = "Unknown";
    if (UploadedImage.FileTimeStamp > 0)
    {
        timeStr = Services.TimeProvider.GetTimeAsLocalStringAgo(UploadedImage.FileTimeStamp, false);
    }

    <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@UploadedImage.FileName</MudText>
                <MudText Typo="Typo.body1">@timeStr</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Reset" Color="Color.Dark">
                    <MudIconButton Icon="@Icons.Material.Filled.ResetTv" Color="Color.Warning" OnClick="ResetImage" Disabled="@(UploadedImage.EditedFileContent == null)" />
                </MudTooltip>

                <MudTooltip Text="Delete" Color="Color.Dark">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="@(Index == 0)" />
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="@ClassPresets.CardContent">
            @{
                <img id="@GetImageId" style="width: 100%; height: auto; object-fit: cover;" @onmousedown="OnImageClicked" />
            }
        </MudCardContent>
    </MudCard>
}

@code {

    [Parameter, EditorRequired] public int Index { get; init; }
    [Parameter, EditorRequired] public IMoaServices Services { get; init; }
    [Parameter, EditorRequired] public AddMemoryUploadResult UploadedImage { get; init; }

    [Inject] public IJSRuntime JsRuntime { get; init; }

    private string GetImageId => $"imageBox-{Index}";
    private DotNetObjectReference<AddMemoryPreviewScreenShotComponent> _objReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("SetImage", GetImageId, UploadedImage.ContentType, UploadedImage.FileContent);
        }
    }

    protected override bool ShouldRender()
    {
        return false;
    }

    private async Task ResetImage()
    {
        UploadedImage.EditedFileContent = null;

        await JsRuntime.InvokeVoidAsync("SetImage", GetImageId, UploadedImage.ContentType, UploadedImage.FileContent);
    }

    private async Task OnImageClicked()
    {
        _objReference ??= DotNetObjectReference.Create(this);

        await JsRuntime.InvokeVoidAsync("OpenImageEditor", GetImageId, _objReference);
    }

    [JSInvokable]
    public Task UpdateImage(byte[] buffer)
    {
        //_objReference?.Dispose();
        //_objReference = null;

        UploadedImage.EditedFileContent = buffer;

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _objReference?.Dispose();
        _objReference = null;
    }
}
