@if (HeaderData == null)
{
    <CardLoadingComponent />
}
else if (HeaderData.Year == -1)
{
    <CardErrorComponent ErrorMessage="Failed" />
}
else
{
    var mainData = HeaderData.Main ?? new DailyActivityResultsMain();
    var userData = HeaderData.User ?? new DailyActivityResultsUser();

    _allBlobInfos.Clear();

    <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderContent>
                @if (HeaderData.Year == 0)
                {
                    <a href="/on-this-day">
                        <MudText Inline="true" Typo="Typo.h6">On This Day in Azeroth</MudText>
                    </a>
                }
                else
                {
                    <MudText Typo="Typo.h6">Year @HeaderData.Year</MudText>
                }

                @{
                    var none = "None";
                    var strings = new List<string>
                    {
                        $"Total Tags: {(mainData.TotalTags > 0 ? mainData.TotalTags.ToString("N0") : none)}",
                        $"Total Achievements: {(mainData.TotalAchievements > 0 ? mainData.TotalAchievements.ToString("N0") : none)}",
                    };

                    if (userData.AccountId > 0)
                    {
                        strings.Add($"Your Achievements: {(userData.Achievements.Count > 0 ? userData.Achievements.Count.ToString("N0") : none)}");
                        strings.Add($"Your First Achievements: {(userData.FirstAchievements.Count > 0 ? userData.FirstAchievements.Count.ToString("N0") : none)}");
                    }

                    foreach (var str in strings)
                    {
                        <MudText Typo="Typo.body1">@str</MudText>
                    }
                }
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="@ClassPresets.CardContent">
            @{
                var otherTuples = new (string Text, List<PostTagInfo> Items)[]
                {
                    new($"Top {mainData.TopTags.Count:N0} Tags", mainData.TopTags),
                    new($"Top {mainData.TopAchievements.Count:N0} Achievements", mainData.TopAchievements),
                    new("First Tags", mainData.FirstTags),
                    new("First Achievements", mainData.FirstAchievements),
                    new("My Achievements", userData.Achievements),
                    new("My First Achievements", userData.FirstAchievements),
                };

                foreach (var (text, items) in otherTuples)
                {
                    @if (items.Count > 0)
                    {
                        <MudPaper Outlined="true" Class="ma-2 pa-2">
                            <MudText Class="ma-2" Typo="Typo.body2"><b>@text</b></MudText>
                            @foreach (var postTagInfo in items)
                            {
                                <PostTagChipComponent TagInfo="postTagInfo" OnClick="() => OnMainTagClicked(postTagInfo)" />
                            }
                        </MudPaper>
                    }
                }

                if (userData.MyMemories.Count > 0)
                {
                    <MudPaper Outlined="true" Class="ma-2 pa-2">
                        <MudText Class="ma-2" Typo="Typo.body2"><b>My Memories</b></MudText>

                        @foreach (var memory in userData.MyMemories)
                        {
                            var link = $"post/{memory.AccountId}/{memory.PostId}";

                            <a href="@link">
                                <MudText Typo="Typo.body2">@Services.ClientServices.TimeProvider.GetTimeAsLocalStringAgo(memory.PostTime, true)</MudText>
                            </a>

                            <MudGrid>
                                @foreach (var blobInfo in memory.BlobInfo)
                                {
                                    var index = _allBlobInfos.Count;

                                    _allBlobInfos.Add(blobInfo);

                                    <MudItem xs="12" sm="4">
                                        <MudImage ObjectFit="ObjectFit.Cover" Fluid="true" Src="@blobInfo.Source" @onclick="() => OnImageClicked(index)" />
                                    </MudItem>
                                }
                            </MudGrid>
                        }

                    </MudPaper>
                }
            }
        </MudCardContent>
    </MudCard>
}

@code {
    private readonly List<PostViewModelBlobInfo> _allBlobInfos = new();

    [Parameter, EditorRequired] public DailyActivityResults HeaderData { get; init; }
    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    private void OnMainTagClicked(PostTagInfo postTagInfo)
    {
        var tagStrings = new List<string>
        {
            postTagInfo.TagString,
        };

        var dictionary = new Dictionary<string, object>
        {
            { "tag", tagStrings.ToArray() }
        };

        ZExtensions.AddToDictOrNull(dictionary, "ptmin", HeaderData.Main.StartTimeMs, HeaderData.Main.StartTimeMs == 0);
        ZExtensions.AddToDictOrNull(dictionary, "ptmax", HeaderData.Main.EndTimeMs, HeaderData.Main.EndTimeMs == 0);

        var newPath = Services.ClientServices.NavigationManager.GetUriWithQueryParameters("postsearch", dictionary);
        Services.ClientServices.NavigationManager.NavigateTo(newPath);
    }

    private void OnUserTagClicked(PostTagInfo postTagInfo)
    {
        var tagStrings = new List<string>();
        if (HeaderData.User.AccountId > 0)
        {
            tagStrings.Add(PostTagInfo.GetTagString(PostTagType.Account, HeaderData.User.AccountId));
        }

        tagStrings.Add(postTagInfo.TagString);

        var dictionary = new Dictionary<string, object>
        {
            { "tag", tagStrings.ToArray() }
        };

        ZExtensions.AddToDictOrNull(dictionary, "ptmin", HeaderData.User.StartTimeMs, HeaderData.User.StartTimeMs == 0);
        ZExtensions.AddToDictOrNull(dictionary, "ptmax", HeaderData.User.EndTimeMs, HeaderData.User.EndTimeMs == 0);

        var newPath = Services.ClientServices.NavigationManager.GetUriWithQueryParameters("postsearch", dictionary);
        Services.ClientServices.NavigationManager.NavigateTo(newPath);
    }

    private async Task OnImageClicked(int index)
    {
        await Services.ClientServices.JsRuntime.InvokeVoidAsync("InitializeImageViewer", index, _allBlobInfos.ToArray());
    }
}
