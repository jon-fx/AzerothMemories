@if (AccountViewModel == null)
{
}
else
{
    <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <MudCardHeader Class="@ClassPresets.CardHeader">
            <CardHeaderAvatar>
                <MudAvatar Size="Size.Large" Image="@AccountViewModel.Avatar">@AccountViewModel.GetAvatarText()</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <a href="@($"/account/{AccountViewModel.Id}")" tabindex="-1">
                    <MudText Inline="true" Typo="Typo.h6">@AccountViewModel.GetDisplayName()</MudText>
                </a>
                @{
                    if (string.IsNullOrWhiteSpace(AccountViewModel.BattleTag))
                    {
                    }
                    else
                    {
                        <div class="d-flex align-center">
                            <MudAvatar Class="mr-1" Style="background-color: transparent" Size="Size.Small" Square="true" Image="@SocialHelpers.BlizzardIconLink" />
                            <MudText Typo="Typo.body2" Inline="true">@AccountViewModel.BattleTag</MudText>
                        </div>
                    }

                    var discord = AccountViewModel.SocialLinks[(int)SocialLinks.Discord];
                    if (string.IsNullOrWhiteSpace(discord))
                    {
                    }
                    else
                    {
                        var socialHelper = SocialHelpers.All[(int)SocialLinks.Discord];
                        <div class="d-flex align-center">
                            <MudAvatar Class="mr-1" Style="background-color: transparent" Size="Size.Small" Square="true" Image="@socialHelper.SocialIconLink" />
                            <MudText Typo="Typo.body2" Inline="true">@discord</MudText>
                        </div>
                    }
                }
            </CardHeaderContent>
            <CardHeaderActions>
                @foreach (var socialHelper in SocialHelpers.All)
                {
                    var suffix = AccountViewModel.SocialLinks[socialHelper.LinkId];
                    if (string.IsNullOrWhiteSpace(suffix))
                    {
                        continue;
                    }

                    if (string.IsNullOrWhiteSpace(socialHelper.LinkPrefix))
                    {
                        continue;
                    }

                    var fullLink = $"{socialHelper.LinkPrefix}{suffix}";

                    <a href="@fullLink">
                        <MudAvatar Class="ma-1" Style="background-color: transparent" Size="Size.Small" Square="true" Image="@socialHelper.SocialIconLink" />
                    </a>
                }
            </CardHeaderActions>
        </MudCardHeader>

        <MudDivider />

        <MudCardContent Class="@ClassPresets.CardContent">
            <div class="d-flex align-baseline">
                <MudIcon Class="mr-1" Icon="@Icons.Filled.CalendarToday" Size="Size.Small" />
                <MudText Typo="Typo.body1" Class="my-auto">@Services.ClientServices.TimeProvider.GetJoinedDate(AccountViewModel.CreatedDateTime)</MudText>
            </div>

            @{
                var totalPostCount = AccountViewModel.TotalPostCount;
                var totalMemoriesCount = AccountViewModel.TotalPostCount + AccountViewModel.TotalMemoriesCount;

                if (totalPostCount > 0)
                {
                    <div class="d-flex align-baseline">
                        <MudIcon Class="mr-1" Icon="@Icons.Filled.PostAdd" Size="Size.Small" />
                        <MudText Typo="Typo.body1" Class="my-auto"><b>@totalPostCount.ToMetric()</b> Posts</MudText>
                    </div>
                }

                if (totalMemoriesCount > 0)
                {
                    <div class="d-flex align-baseline">
                        <MudIcon Class="mr-1" Icon="@Icons.Filled.LinkedCamera" Size="Size.Small" />
                        <MudText Typo="Typo.body1" Class="my-auto"><b>@totalMemoriesCount.ToMetric()</b> Memories</MudText>
                    </div>
                }
            }
        </MudCardContent>

        <MudDivider />

        <MudCardActions Class="@ClassPresets.CardActions">
            @{
                for (var i = 0; i < 2; i++)
                {
                    var boolean = i == 1;
                    var buttonGroupClass = "pa-0 ma-2";
                    if (!boolean)
                    {
                        buttonGroupClass += " mud-width-full";
                    }

                    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="@boolean">
                        <MudButtonGroup OverrideStyles="true" Class="@buttonGroupClass" Variant="Variant.Filled" VerticalAlign="!boolean">
                            <a href="@($"/follow/{AccountViewModel.Id}")">
                                <MudButton FullWidth="!boolean">
                                    <MudText Inline="true"><b>@_followingCount.ToString("N0")</b> Following</MudText>
                                </MudButton>
                            </a>
                            <a href="@($"/follow/{AccountViewModel.Id}")">
                                <MudButton FullWidth="!boolean">
                                    <MudText Inline="true"><b>@_followerCount.ToString("N0")</b> Followers</MudText>
                                </MudButton>
                            </a>

                            @{
                                var accountViewModel = Services.ClientServices.ActiveAccountServices.AccountViewModel;
                                if (accountViewModel != null)
                                {
                                    accountViewModel.FollowingViewModels.TryGetValue(AccountViewModel.Id, out var followingViewModel);
                                    accountViewModel.FollowersViewModels.TryGetValue(AccountViewModel.Id, out var followerViewModel);

                                    <AccountFollowingComponent Services="@Services" ActiveAccountViewModel="@accountViewModel" OtherAccountId="@AccountViewModel.Id" FollowingViewModel="@followingViewModel" FollowerViewModel="@followerViewModel" ButtonFullWidth="!boolean" />
                                }
                            }
                        </MudButtonGroup>
                    </MudHidden>
                }
            }
        </MudCardActions>
    </MudCard>

    var characters = AccountViewModel.GetCharactersSafe();
    if (characters.Length > 0)
    {
        <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
            <MudCardContent Class="@ClassPresets.CardContent">
                @foreach (var character in characters)
                {
                    <CharacterLinkButton @key="character" BlizzardStringLocalizer="@Services.ClientServices.BlizzardStringLocalizer" CharacterViewModel="@character" />
                }
            </MudCardContent>
        </MudCard>
    }
}

@code {
    private bool _accountChanged;
    private AccountViewModel _account;

    private int _followerCount;
    private int _followingCount;

    [Parameter, EditorRequired]
    public IMoaServices Services { get; init; }

    [Parameter, EditorRequired]
    public AccountViewModel AccountViewModel
    {
        get => _account;
        init
        {
            _accountChanged = _account != value;
            _account = value;

            if (_account != null)
            {
                _followerCount = _account.FollowersViewModels.Count(x => x.Value.Status == AccountFollowingStatus.Active);
                _followingCount = _account.FollowingViewModels.Count(x => x.Value.Status == AccountFollowingStatus.Active);
            }
        }
    }

    //public bool IsDisabled => !Services.ActiveAccountServices.IsAccountActive;

    //public bool IsActiveAccount => Services.ActiveAccountServices.IsAccountActive && Services.ActiveAccountServices.IsActiveAccount(AccountViewModel.Id);
}