<div class="postIndent">
    @if (!Services.ClientServices.ActiveAccountServices.AccountViewModel.CanPublishComment())
    {
        <CardInfoComponent Message="Insufficient permissions." />
    }
    else
    {
        <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
            <MudCardHeader Class="@ClassPresets.CardHeader">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small">
                        @{
                            var avatarSource = Services.ClientServices.ActiveAccountServices.AccountViewModel.Avatar;
                            var avatarAlt = Services.ClientServices.ActiveAccountServices.AccountViewModel.GetAvatarText();

                            if (string.IsNullOrWhiteSpace(avatarSource))
                            {
                                @avatarAlt
                            }
                            else
                            {
                                <MudImage Src="@avatarSource" loading="lazy" />
                            }
                        }
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@Services.ClientServices.ActiveAccountServices.AccountViewModel.GetDisplayName()</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent Class="@ClassPresets.CardContent">
                <PublishCommentComponent @ref="_commentComponent" IsMainPost="false" TagsList="@Services.ClientServices.ActiveAccountServices.GetUserTagList()" OnSingleLineSubmit="@OnSubmitComment" Disabled="@_isCommentBoxDisabled" AutoFocus="true" />
            </MudCardContent>

            <MudCardActions Class="@ClassPresets.CardActions">
            </MudCardActions>
        </MudCard>
    }
</div>

@code {
    private bool _isFirstRenderDone;
    private bool _isCommentBoxDisabled;
    private PublishCommentComponent _commentComponent;

    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    [Parameter] public int ReplyToUserId { get; init; }

    [Parameter] public string ReplyToUsername { get; init; }

    [Parameter, EditorRequired] public int PostId { get; init; }

    [Parameter] public int CommentId { get; init; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && !_isFirstRenderDone)
        {
            _isFirstRenderDone = true;

            if (_commentComponent != null && ReplyToUserId > 0 && !string.IsNullOrEmpty(ReplyToUsername))
            {
                _commentComponent.ExtraTags.TryAdd(ReplyToUserId, ReplyToUsername);
                _commentComponent.SetReplyText(ReplyToUserId, ReplyToUsername);

                StateHasChanged();
            }
        }
    }

    private async Task OnSubmitComment(string commentText)
    {
        _isCommentBoxDisabled = true;

        var postId = PostId;
        var parentId = CommentId;
        var result = await Services.ClientServices.CommandRunner.Run(new Post_TryPublishComment(Services.ClientServices.ActiveAccountServices.ActiveSession, postId, parentId, commentText));
        if (result.Value > 0)
        {
            _commentComponent.Reset();

            Services.ClientServices.ActiveAccountServices.ActiveCommentContext = null;

            var dictionary = new Dictionary<string, object>
            {
                { "page",null},
                { "comment", result.Value }
            };

            var newPath = Services.ClientServices.NavigationManager.GetUriWithQueryParameters(dictionary);
            Services.ClientServices.NavigationManager.NavigateTo(newPath);
        }

        _isCommentBoxDisabled = false;
    }
}