<div class="postIndent">
    @if (!Services.ActiveAccountServices.IsAccountActiveAndCanInteract)
    {
        <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
            <MudCardHeader Class="@ClassPresets.CardHeader">
                <CardHeaderContent>
                    <MudText Typo="Typo.body1" Align="Align.Center">Insufficient permissions.</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    }
    else
    {
        <MudCard Class="@ClassPresets.CardHeaderPostCard" Outlined="true" Elevation="10">
            <MudCardHeader Class="@ClassPresets.CardHeader">
                <CardHeaderAvatar >
                    <MudAvatar Size="Size.Small" Image="@Services.ActiveAccountServices.AccountViewModel.Avatar">@Services.ActiveAccountServices.AccountViewModel.GetAvatarText()</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@Services.ActiveAccountServices.AccountViewModel.Username</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                </CardHeaderActions>
            </MudCardHeader>
            
            <MudCardContent Class="@ClassPresets.CardContent">
                <PublishCommentComponent @ref="_commentComponent" Lines="1" TagsList="@Services.ActiveAccountServices.GetUserTagList()" OnSingleLineSubmit="@OnSubmitComment" Disabled="@_isCommentBoxDisabled" AutoFocus="true" />
            </MudCardContent>
            
            <MudCardActions Class="@ClassPresets.CardActions">
            </MudCardActions>
        </MudCard>
    }
</div>

@code {
    private string _prefixText;
    private bool _isFirstRenderDone;
    private bool _isCommentBoxDisabled;
    private PublishCommentComponent _commentComponent;

    [Parameter, EditorRequired] public IMoaServices Services { get; init; }

    [Parameter] public long ReplyToUserId { get; init; }

    [Parameter] public string ReplyToUsername { get; init; }

    [Parameter, EditorRequired] public long PostId { get; init; }

    [Parameter] public long CommentId { get; init; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && !_isFirstRenderDone)
        {
            _isFirstRenderDone = true;

            if (_commentComponent != null && ReplyToUserId > 0 && !string.IsNullOrEmpty(ReplyToUsername))
            {
                _prefixText = $"@{ReplyToUsername} ";
                _commentComponent.ExtraTags.TryAdd(ReplyToUserId, ReplyToUsername);
                _commentComponent.SetText(_prefixText);

                StateHasChanged();
            }
        }
    }

    private async Task OnSubmitComment(string commentText)
    {
        _isCommentBoxDisabled = true;

        var postId = PostId;
        var parentId = CommentId;
        var result = await Services.ComputeServices.PostServices.TryPublishComment(null, postId, parentId, new AddCommentTransferData { Comment = commentText });
        if (result > 0)
        {
            _commentComponent.Reset();

            Services.ActiveAccountServices.ActiveCommentContext = null;
            
            var dictionary = new Dictionary<string, object>
            {
                { "page",null},
                { "comment",result }
            };

            var newPath = Services.NavigationManager.GetUriWithQueryParameters(dictionary);
            Services.NavigationManager.NavigateTo(newPath);
        }

        _isCommentBoxDisabled = false;
    }
}
