@page "/post/{Id:long}/{PostId:long}"
@page "/post/{Name}/{PostId:long}"
@using System.Text
@inherits MoaComponentBase<PostPageViewModel>

@if (ViewModel.Helper == null)
{
    <CardLoadingComponent />
}
else if (!string.IsNullOrWhiteSpace(ViewModel.Helper.ErrorMessage))
{
    <CardErrorComponent ErrorMessage="@ViewModel.Helper.ErrorMessage" />
}
else if ( ViewModel.Helper.AccountViewModel == null || ViewModel.Helper.PostViewModel == null )
{
    <CardLoadingComponent />
}
else
{
    var name = $"{ViewModel.Helper.AccountViewModel.GetDisplayName()}'s Memory of Azeroth";
    var image = ViewModel.Helper.PostViewModel.ImageBlobNames.FirstOrDefault();
    var altImage = name;
    var stringBuilder = new StringBuilder();
    foreach (var systemTag in ViewModel.Helper.PostViewModel.SystemTags)
    {
        stringBuilder.Append($"{systemTag.Name}, ");
    }

    var description = stringBuilder.ToString().TrimEnd(',', ' ');

    <PageTitle>@name</PageTitle>
    <HeadContentTest Url="@NavigationManager.Uri" Title="@name" Description="@description" Image="@image" AltImage="@altImage"/>

    <AccountHeaderCardComponent Services="@this" AccountViewModel="@ViewModel.Helper.AccountViewModel" />
    <PostViewComponent Services="@this" Helper="@ViewModel.Helper"/>
}

@code 
{
    [Parameter, EditorRequired] public long Id { get; set; }

    [Parameter, EditorRequired] public long PostId { get; set; }

    [Parameter, EditorRequired] public string Name { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")] public string CurrentPage { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "comment")] public string FocusedCommentId { get; init; }
    
    [Inject] IScrollManager ScrollManager { get; init; }

    protected override async Task InternalComputeState()
    {
        await ViewModel.Helper.ComputeState(Id, Name, PostId, CurrentPage, FocusedCommentId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await ViewModel.Helper.OnAfterRenderAsync(ScrollManager, firstRender);
    }
}