@page "/post/{Id}/{PostId}"
@using System.Text
@inherits MoaComponentBase<PostPageViewModel>

@if (ViewModel.Helper == null)
{
    <CardLoadingComponent />
}
else if (!string.IsNullOrWhiteSpace(ViewModel.Helper.ErrorMessage))
{
    <CardErrorComponent ErrorMessage="@ViewModel.Helper.ErrorMessage" />
}
else if (ViewModel.Helper.AccountViewModel == null || ViewModel.Helper.PostViewModel == null)
{
    <CardLoadingComponent />
}
else
{
    var name = $"{ViewModel.Helper.AccountViewModel.GetDisplayName()}'s Memory of Azeroth";
    var allBlobInfo = ViewModel.Helper.PostViewModel.GetImageBlobInfo();

    string image = null;
    if (allBlobInfo.Length > 0)
    {
        image = allBlobInfo[0].Source;
    }

    var altImage = name;
    var stringBuilder = new StringBuilder();
    foreach (var systemTag in ViewModel.Helper.PostViewModel.SystemTags)
    {
        stringBuilder.Append($"{systemTag.Name}, ");
    }

    var description = stringBuilder.ToString().TrimEnd(',', ' ');

    <PageTitle>@name</PageTitle>
    <HeadContentTest Url="@ClientServices.NavigationManager.Uri" Title="@name" Description="@description" Image="@image" AltImage="@altImage" />

    <AccountHeaderCardComponent Services="@(this)" AccountViewModel="@ViewModel.Helper.AccountViewModel" />
    <PostViewComponent Services="@(this)" Helper="@ViewModel.Helper" />
}

@code
{
    [Parameter, EditorRequired] public string Id { get; set; }

    [Parameter, EditorRequired] public string PostId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "page")] public string CurrentPage { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "comment")] public string FocusedCommentId { get; init; }

    protected override void OnParametersChanged()
    {
        base.OnParametersChanged();

        ViewModel.OnParametersChanged(Id, PostId, CurrentPage, FocusedCommentId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await ViewModel.Helper.OnAfterRenderAsync(firstRender);
    }
}