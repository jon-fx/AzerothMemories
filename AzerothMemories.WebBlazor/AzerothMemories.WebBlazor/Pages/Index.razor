@page "/"
@inject IAccountServices _accountServices;
@inject ClientAuthHelper _clientAuthHelper
@inherits ComputedStateComponent<AzerothMemories.Services.AccountViewModel>

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<MudButton OnClick="@(() => SignIn("BattleNet-Europe"))">Sign In</MudButton>
<MudButton OnClick="@(() => SignIn("BattleNet-UnitedStates"))">Sign In</MudButton>
<MudButton OnClick="SignOut">Sign Out</MudButton>

Welcome to your new app.

<AuthorizeView>
	<Authorized>
		<MudText Color="Color.Tertiary">Authorized</MudText>
		<MudText Color="Color.Tertiary">@_clientAuthHelper.Session.Id</MudText>
		<MudText Color="Color.Tertiary">@_clientAuthHelper.Auth.GetUser(_clientAuthHelper.Session).Result.Name</MudText>
	</Authorized>
	<NotAuthorized>
		<MudText Color="Color.Error">NotAuthorized</MudText>
		<MudText Color="Color.Error">@_clientAuthHelper.Session.Id</MudText>
	</NotAuthorized>
</AuthorizeView>

@{
	var state = State.Value;
	if (state != null)
	{
		<MudText Color="Color.Warning">State: </MudText>
		<MudText Color="Color.Warning">@state.Username</MudText>
	}
	else
	{
		<MudText Color="Color.Warning">State: NULL </MudText>
	}

	<MudButton OnClick="@(() => Tests("Lightfx" + Random.Shared.NextInt64(0, 100000)))">Change Username</MudButton>
}

@code
{
	private async Task SignIn(string str)
	{
		await _clientAuthHelper.SignIn(str);
	}

	private async Task SignOut()
	{
		await _clientAuthHelper.SignOut();
	}

	protected override async Task<AccountViewModel> ComputeState(CancellationToken cancellationToken)
	{
		//var account = await _accountServices.TryGetAccount(null, 1, cancellationToken);
		//return account;

		return null;
	}

	private async Task Tests(string newUsername)
	{
		//var res = await _accountServices.TryChangeUsername(null, newUsername);
		//if (res == string.Empty)
		//{
		//}
	}
}