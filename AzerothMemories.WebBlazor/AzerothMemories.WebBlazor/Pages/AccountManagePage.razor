@page "/accountmanage"
@inherits MoaComponentBase<AccountManagePageViewModel>


<PageTitle>Manage Account - Memories of Azeroth</PageTitle>

<AuthorizeView>
    @if (ViewModel != null && ViewModel.AccountViewModel != null)
    {
        <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
            <MudCardHeader Class="@ClassPresets.CardHeader">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Large" Image="@ViewModel.AccountViewModel.Avatar">@ViewModel.AccountViewModel.GetAvatarText()</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Manage Account</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="@ClassPresets.CardContent">
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField T="string"
                                  Label="Username"
                                  @bind-Value="ViewModel.NewUsername"
                                  Disabled="!ViewModel.AccountViewModel.CanChangeUsername"
                                  Adornment="Adornment.End"
                                  AdornmentIcon=@ViewModel.NewUsernameTextBoxAdornmentIcon
                                  AdornmentColor=@ViewModel.NewUsernameTextBoxAdornmentColor
                                  DebounceInterval="500"
                                  OnDebounceIntervalElapsed="ViewModel.OnNewUsernameTextChanged"
                                  MaxLength="49" />
                    </MudItem>
                    <MudItem xs="6" Class="my-auto">
                        @if (ViewModel.ChangeUsernameButtonVisible)
                        {
                            <MudButton Variant="Variant.Filled" Disabled="!ViewModel.NewUsernameValid" FullWidth="true" OnClick="ViewModel.OnChangeUsernameClicked">Change Username</MudButton>
                        }
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="string" Label="Battle Tag" @bind-Value="ViewModel.AccountViewModel.BattleTag" Disabled="true" MaxLength="49" />
                    </MudItem>
                    <MudItem xs="6" Class="my-auto">
                        <MudSwitch T="bool" Checked="@ViewModel.AccountViewModel.BattleTagIsPublic" Color="Color.Primary" Label="Public" CheckedChanged="ViewModel.OnBattleTagVisibilityChanged" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudSwitch T="bool" Checked="@ViewModel.AccountViewModel.IsPrivate" Color="Color.Primary" Label="Private" CheckedChanged="ViewModel.OnIsPrivateChanged" />
                    </MudItem>

                    @foreach (var link in SocialHelpers.All)
                    {
                        <MudItem xs="6" Class="d-flex align-baseline">
                            <img src="@link.SocialIconLink" width="18" height="18" />
                            <MudTextField T="string"
                                  Class="px-2"
                                  Value="@ViewModel.SocialLinks[link.LinkId]"
                                  Label="@link.Name"
                                  Adornment="Adornment.End"
                                  AdornmentIcon=@ViewModel.SocialLinksAdornmentIcons[link.LinkId]
                                  AdornmentColor=@ViewModel.SocialLinksAdornmentColors[link.LinkId]
                                  ValueChanged="x => ViewModel.OnSocialLinkChanged(link, x)"
                                  MaxLength="49" />
                        </MudItem>
                        <MudItem xs="6">
                        </MudItem>
                    }
                </MudGrid>

            </MudCardContent>
        </MudCard>

        var characters = ViewModel.AccountViewModel.GetAllCharactersSafe();
        if (characters.Length > 0)
        {
            <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
                <MudCardHeader Class="@ClassPresets.CardHeader">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Manage Avatar</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="@ClassPresets.CardContent">
                    @for (var i = 0; i < characters.Length; i++)
                    {
                        var index = i;
                        var character = characters[index];

                        if (string.IsNullOrWhiteSpace(character.AvatarLink))
                        {
                            continue;
                        }

                        <MudTooltip @key="@character.Id" Placement="Placement.Bottom" Color="Color.Dark">
                            <ChildContent>
                                <MudButton Id="@index" Variant="Variant.Filled" Disabled="ViewModel.AvatarLink == character.AvatarLink" OnClick="() => ViewModel.OnChangeAvatarButtonClicked(character)">
                                    <MudAvatar Size="Size.Medium" Image="@character.AvatarLink" />
                                </MudButton>
                            </ChildContent>
                            <TooltipContent>
                                <CharacterNameLinkComponent CharacterName="@character.Name"
                                                CharacterClass="@character.Class"
                                                CharacterRealmId="@character.RealmId"
                                                CharacterRegionInfo="@character.RegionId.ToInfo()" />

                                <div>
                                    <MudText Inline="true" Typo="Typo.body2">@character.Level @StringLocalizer[$"CharacterRace-{character.Race}"]</MudText>
                                    <MudText Inline="true" Typo="Typo.body2" Class=@($"wowclass-{character.Class}")>@StringLocalizer[$"CharacterClass-{character.Class}"]</MudText>
                                </div>

                                <RealmLinkComponent Typo="Typo.caption" BlizzardRealmId="@character.RealmId" />
                            </TooltipContent>
                        </MudTooltip>
                    }
                </MudCardContent>
            </MudCard>
        }


        var otherCharacters = new List<CharacterViewModel>();

        foreach (var character in characters)
        {
            if (character.CharacterStatus == CharacterStatus2.None)
            {
                otherCharacters.Add(character);
            }
            else if (character.CharacterStatus == CharacterStatus2.MaybeDeleted)
            {
                var possibleCharacters = characters.Where(x => x.Class == character.Class && x.Level >= character.Level).ToArray();

                <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
                    <MudCardHeader Class="@ClassPresets.CardHeader">
                        <CardHeaderAvatar>
                            <MudAvatar Size="Size.Large" Image="@character.AvatarLinkWithFallBack">@character.Name[0]</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <CharacterNameLinkComponent Typo="Typo.h6"
                                            CharacterName="@character.Name"
                                            CharacterClass="@character.Class"
                                            CharacterRealmId="@character.RealmId"
                                            CharacterRegionInfo="@character.RegionId.ToInfo()" />
                            <div>
                                <MudText Inline="true" Typo="Typo.body2">@character.Level</MudText>
                                <CharacterRaceComponent Typo="Typo.body2" Inline="true" CharacterRace="@character.Race" />
                                <CharacterClassComponent Typo="Typo.body2" Inline="true" CharacterClass="@character.Class" />
                            </div>


                            <RealmLinkComponent Class="d-block" Typo="Typo.caption" BlizzardRealmId="@character.RealmId" />
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardActions Class="@ClassPresets.CardActions">
                        <MudButtonGroup OverrideStyles="true" Class="pa-2 ma-2" Variant="Variant.Filled" Size="Size.Small">
                            <MudButton StartIcon="@Icons.Material.Filled.DeleteForever" OnClick="() => ViewModel.OnCharacterDeletedClicked(character)">Deleted</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Transform" Disabled="@(possibleCharacters.Length == 0)">Transferred / Renamed</MudButton>
                            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Direction="Direction.Bottom" OffsetY="true">
                                @foreach (var otherCharacter in possibleCharacters)
                                {
                                    if (otherCharacter.CharacterStatus == CharacterStatus2.MaybeDeleted)
                                    {
                                        continue;
                                    }

                                    <MudMenuItem OnClick="() => ViewModel.OnCharacterRenamedOrTransferred(character, otherCharacter)">

                                        <CharacterNameLinkComponent Typo="Typo.h6"
                                                    CharacterName="@otherCharacter.Name"
                                                    CharacterClass="@otherCharacter.Class"
                                                    CharacterRealmId="@otherCharacter.RealmId"
                                                    CharacterRegionInfo="@otherCharacter.RegionId.ToInfo()"
                                                    LinkDisabled="true" />
                                        <div>
                                            <MudText Inline="true" Typo="Typo.body2">@otherCharacter.Level</MudText>
                                            <CharacterRaceComponent Typo="Typo.body2" Inline="true" CharacterRace="@otherCharacter.Race" LinkDisabled="true" />
                                            <CharacterClassComponent Typo="Typo.body2" Inline="true" CharacterClass="@otherCharacter.Class" LinkDisabled="true" />
                                        </div>


                                        <RealmLinkComponent Class="d-block" Typo="Typo.caption" BlizzardRealmId="@otherCharacter.RealmId" LinkDisabled="true" />
                                    </MudMenuItem>
                                }
                            </MudMenu>
                        </MudButtonGroup>
                    </MudCardActions>
                </MudCard>
            }
        }

        <MudCard Class="@ClassPresets.Card" Outlined="true" Elevation="10">
            <MudCardHeader Class="@ClassPresets.CardHeader">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Manage Characters</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="@ClassPresets.CardContent">
                <MudSimpleTable Hover="true" Dense="true" Striped="true" Breakpoint="Breakpoint.None">
                    <thead>
                        <tr>
                            <MudTh></MudTh>

                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudTh>Name</MudTh>
                                <MudTh>Realm</MudTh>
                                <MudTh>Race</MudTh>
                                <MudTh>Class</MudTh>
                                <MudTh>Level</MudTh>
                            </MudHidden>

                            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                <MudTh>Name</MudTh>
                            </MudHidden>

                            <MudTh>Sync</MudTh>
                            <MudTh>Result</MudTh>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var row in otherCharacters)
                            {
                                <tr @key="row.Id">
                                    <MudTd>
                                        <MudAvatar Size="Size.Medium" Image="@row.AvatarLinkWithFallBack" />
                                    </MudTd>
                                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                        <MudTd DataLabel="Name">
                                            <CharacterNameLinkComponent CharacterName="@row.Name"
                                                            CharacterClass="@row.Class"
                                                            CharacterRealmId="@row.RealmId"
                                                            CharacterRegionInfo="@row.RegionId.ToInfo()" />
                                        </MudTd>
                                        <MudTd DataLabel="Realm">
                                            <RealmLinkComponent BlizzardRealmId="@row.RealmId" />
                                        </MudTd>

                                        <MudTd DataLabel="Race">
                                            <CharacterRaceComponent CharacterRace="@row.Race" />
                                        </MudTd>

                                        <MudTd DataLabel="Class">
                                            <CharacterClassComponent CharacterClass="@row.Class" />
                                        </MudTd>

                                        <MudTd DataLabel="Level">
                                            @row.Level
                                        </MudTd>
                                    </MudHidden>
                                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                        <MudTd DataLabel="Name">
                                            <CharacterNameLinkComponent CharacterName="@row.Name"
                                                            CharacterClass="@row.Class"
                                                            CharacterRealmId="@row.RealmId"
                                                            CharacterRegionInfo="@row.RegionId.ToInfo()" />

                                            <div>
                                                <MudText Inline="true">@row.Level</MudText>
                                                <CharacterRaceComponent Inline="true" CharacterRace="@row.Race" />
                                                <CharacterClassComponent Inline="true" CharacterClass="@row.Class" />
                                            </div>

                                            <RealmLinkComponent BlizzardRealmId="@row.RealmId" />
                                        </MudTd>
                                    </MudHidden>

                                    <MudTd DataLabel="Sync">
                                        <MudToggleIconButton Toggled="@row.AccountSync"
                                                 Icon="@Icons.Material.Filled.HourglassDisabled" Color="@Color.Error"
                                                 ToggledIcon="@Icons.Material.Filled.HourglassBottom" ToggledColor="@Color.Success"
                                                 ToggledChanged=@(x => ViewModel.OnAccountSyncToggleChanged(row, x)) />
                                    </MudTd>

                                    <MudTd DataLabel="Result">
                                        @row.LastUpdateHttpResult
                                    </MudTd>
                                </tr>
                            }
                        }
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    }
</AuthorizeView>