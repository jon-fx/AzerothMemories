@page "/postsearch/"
@inherits MoaComponentBase<PostSearchPageViewModel>

@if (ViewModel.PostSearchHelper != null)
{
    <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <MudGrid>
            <MudItem xs="6">
                <DateTimeComponent Instant="@ViewModel.PostSearchHelper.MinDateTime" OnInstantEventCallback="@ViewModel.PostSearchHelper.OnMinDateTimeChanged" />
            </MudItem>
            <MudItem xs="6">
                <DateTimeComponent Instant="@ViewModel.PostSearchHelper.MaxDateTime" OnInstantEventCallback="@ViewModel.PostSearchHelper.OnMaxDateTimeChanged" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
        <SearchBlizzardDataComponent Services="@this" OnSelectedItemChanged="@ViewModel.PostSearchHelper.AddSearchDataToTags" />
    </MudPaper>

    @if (ViewModel.PostSearchHelper.SelectedSearchTags.Length > 0)
    {
        <MudPaper Class="@ClassPresets.Card" Outlined="true" Elevation="10">
            @foreach (var tagInfo in ViewModel.PostSearchHelper.SelectedSearchTags)
            {
                <PostTagChipComponent @key="@tagInfo" TagInfo="tagInfo" OnClose="ViewModel.PostSearchHelper.OnSelectedChipClose" />
            }
        </MudPaper>
    }

    <SearchPostViewComponent PostSearchHelper="@ViewModel.PostSearchHelper" IsSearchPage="true" />
}
else
{
    <CardLoadingComponent />
}

@code
{
    private bool _firstRenderDone;

    [Parameter, SupplyParameterFromQuery(Name = "tag")] public string[] Tags { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "sort")] public string SortMode { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "page")] public string CurrentPage { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "ptmin")] public string PostMinTime { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "ptmax")] public string PostMaxTime { get; init; }

    protected override void OnParametersChanged()
    {
        base.OnParametersChanged();
        
        ViewModel.OnParametersChanged(Tags, SortMode, CurrentPage, PostMinTime, PostMaxTime);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            _firstRenderDone = true;
        }
    }

    protected override async Task OnComputeState(CancellationToken cancellationToken)
    {
        await base.OnComputeState(cancellationToken);

        if (_firstRenderDone)
        {
            await ClientServices.JsRuntime.InvokeVoidAsync("HideWowheadToolTips", cancellationToken);
        }
    }
}