@page "/character/{Id:long}"
@page "/character/{Region}/{Realm}/{Name}"
@inherits MoaComponentBase<CharacterPagePageViewModel>

@{
    if (!string.IsNullOrWhiteSpace(ViewModel.ErrorMessage))
    {
        <CardErrorComponent ErrorMessage="@ViewModel.ErrorMessage" />
    }
    else if (ViewModel.IsLoading)
    {
        <CardLoadingComponent />
    }
    else
    {
        var name = $"{ViewModel.CharacterViewModel.Name}'s Memories of Azeroth";
        var image = ViewModel.CharacterViewModel.AvatarLinkWithFallBack;
        var altImage = name;

        <PageTitle>@name</PageTitle>
        <HeadContentTest Url="@ClientServices.NavigationManager.Uri" Title="@name" Description="@name" Image="@image" AltImage="@altImage" />

        <AccountHeaderCardComponent Services="@this" AccountViewModel="@ViewModel.AccountViewModel" />
        <CharacterHeaderCardComponent Services="@this" CharacterViewModel="@ViewModel.CharacterViewModel" />
        <SearchPostViewComponent PostSearchHelper="@ViewModel.PostSearchHelper" />
    }
}

@code
{
    [Parameter, EditorRequired] public long Id { get; set; }

    [Parameter, EditorRequired] public string Region { get; set; }

    [Parameter, EditorRequired] public string Realm { get; set; }

    [Parameter, EditorRequired] public string Name { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "sort")] public string SortMode { get; init; }

    [Parameter, SupplyParameterFromQuery(Name = "page")] public string CurrentPage { get; init; }

    protected override async Task InternalComputeState()
    {
        await ViewModel.ComputeState(Id, Region, Realm, Name, SortMode, CurrentPage);
    }
}