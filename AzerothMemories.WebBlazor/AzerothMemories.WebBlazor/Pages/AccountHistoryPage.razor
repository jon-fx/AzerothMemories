@page "/accounthistory/"
@inherits MoaComponentBase<AccountHistoryPageViewModel>

<AuthorizeView>
    <Authorized>
        @if (ViewModel.HistoryViewModels == null || ViewModel.HistoryViewModels.Length == 0)
        {
            <MudCard Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
                <MudCardContent>
                    <MudText Align="Align.Center">None</MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudTimeline TimelinePosition="TimelinePosition.Start">
                @foreach(var viewModel in ViewModel.HistoryViewModels)
                { 
                    var str = (MarkupString) viewModel.GetDisplayText(ActiveAccountServices.AccountViewModel, StringLocalizer);

                    <MudTimelineItem Color="Color.Info">
                        <MudCard Class="pa-2 ma-2 card" Outlined="true" Elevation="25">
                            <MudCardContent>
                                <MudText Typo="Typo.button">@str</MudText>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">@TimeProvider.GetTimeAsLocalStringAgo(viewModel.CreatedTime, true)}</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudTimelineItem>
                }
            </MudTimeline>
            
            <div class="d-flex justify-center">
                <MudPagination Selected="@ViewModel.CurrentPage" SelectedChanged="@ViewModel.TryChangePage" BoundaryCount="2" MiddleCount="5" Rectangular="true" Variant="Variant.Filled" ShowFirstButton="true" ShowLastButton="true" Count="@ViewModel.TotalPages" />
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <MudCard Class="pa-2 ma-2 card" Outlined="true" Elevation="10">
            <MudCardContent>
                <MudText Align="Align.Center">None</MudText>
            </MudCardContent>
        </MudCard>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "page")] public string CurrentPage { get; init; }

    protected override async Task InternalComputeState()
    {
        await base.InternalComputeState();

        await ViewModel.ComputeState(CurrentPage);
    }
}
